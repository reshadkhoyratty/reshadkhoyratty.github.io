{
  "menu": {
    "index": "Index",
    "home": "Accueil",
    "toStart": "Pour commencer",
    "blmd": "BL MD",
    "styles": "Styles",
    "style": {
      "number-chip": "Pastille numérique",
      "labelCounter": "Compteur étiquette",
      "callout": "Callout",
      "icon": "Icônes",
      "matformfield": "Apparence",
      "fab-menu": "Menu déroulant",
      "tab-views": "Onglets",
      "popup-card": "Carte de navigation",
      "label": "Étiquette",
      "marketing-panel": "Bandeau marketing",
      "imageWithContent": "Image avec du contenu",
      "bubbleIcon": "Bulle avec icône"
    },
    "components": "Composants",
    "component": {
      "overview": "Aperçu des composants",
      "expension-panel": "Accordéon",
      "tree": "Arbre",
      "auto-complete": "Auto complétion [Abstrait]",
      "action-banner": "Bandeau d'actions",
      "marketing-panel": "Bandeau marketing",
      "dialog": "Boîte de dialogue",
      "generic-dialog": " Boîte de dialogue génerique",
      "buttons-submenu": "Boutons",
      "buttons": {
        "button": "Bouton",
        "fab-menu": "Bouton flottant avec menu",
        "button-link": "Bouton lien",
        "vertical-menu": "Bouton picto avec menu",
        "split-button": "Bouton text avec menu",
        "transvers-menu": "Bouton menu transverse"
      },
      "radio-button": "Bouton radio",
      "callout": "Message de rappel",
      "card": "Carte",
      "nav-card": "Carte de navigation",
      "card-expension-panel": "Carte + expansion",
      "checkbox": "Case à cocher",
      "decimal": "Champ décimal",
      "fraction": "Champ fraction",
      "text-field": "Champ texte",
      "comment-area": "Champ commentaire",
      "chips": "Chips",
      "counter": "Compteur",
      "color-picker": "Sélecteur de couleur",
      "icon-picker": "Sélecteur d'icône",
      "image-picker": "Sélecteur d'image",
      "date-time-submenu": "Date et heure",
      "date-time": {
        "calendar": "Calendrier",
        "date-picker": "Champ date",
        "date-picker-range": "Champ date avec plage",
        "period": "Champ période",
        "year-picker": "Champ année",
        "hour-picker": "Champ heure"
      },
      "rich-text-editor": "Editeur de texte enrichi",
      "no-data": "Etat vide",
      "bread-crumb": "File d'ariane",
      "filter": "Filtre",
      "slide-toggle": "Interrupteur",
      "horizontal-gauge": "Jauge horizontale",
      "radial-gauge": "Jauge radiale",
      "labels": "Labels",
      "hyperlink": "Lien hypertexte",
      "list": "Listes",
      "editable-list": "Liste éditable",
      "select-submenu": "Listes déroulantes",
      "selects": {
        "simple-select": "Liste déroulante",
        "listbox-abstract": "Liste métier [Abstrait]",
        "multicombo-abstract": "Liste à choix multiples [Abstrait]",
        "multicombo-search": "Liste recherche à choix multiples [Abstrait]",
        "search-abstract": "Liste avec recherche [Abstrait]"
      },
      "dashboard-list": "Liste Tableau de bord",
      "memo": "Mémo",
      "tab-group": "Onglets",
      "attachment": "Pièce Jointe",
      "multi-attachment": "Pièces Jointe Multiple",
      "quick-search": "Recherche rapide",
      "quick-search-abstract": {
        "quick-search-simple": "Recherche rapide [Abstrait]",
        "quick-search-multiple": "Recherche rapide multiple [Abstrait]",
        "quick-search-dynamic": "Recherche Rapide Dialog Dynamique [Abstrait]"
      },
      "shortcut": "Raccourcis internes",
      "snackbar": "Message Toast",
      "divider": "Séparateur",
      "stepper": "Étapes",
      "task": "Tâche",
      "tables": "Tableaux",
      "table": {
        "generator": "Générateur",
        "example-with-upper-filter": "Exemple avec filtre en haut",
        "example-with-side-filter": "Exemple avec filtre à droite",
        "doc": "Documentation",
        "markedFor": "Table avec Actions marquées"
      },
      "workflow": "Flux de travail"
    },
    "utilities": "Utilitaires",
    "utility": {
      "i18n": "Internationalisation",
      "form-error": "Erreurs de formulaire",
      "notification": "Notification",
      "notification-modal": "Notification modale",
      "shortcut": "Raccourcis internes",
      "close-alert": "Alerte fermeture",
      "sticky-header": "Sticky Header"
    },
    "layout_templates": "Modèles",
    "template": {
      "pageTemplate": "Modèle de page",
      "editableListTemplate": "Liste éditable",
      "tableWithFilterUpTemplate": "Tableau avec filtres en haut",
      "tables": "Tableaux",
      "simpleTable": "Tableau simple",
      "accesibility": "Accessibilité"
    },
    "forms": "Formulaires",
    "formExamples": {
      "complexForm": "Formulaire complexe",
      "simpleForm": "Formulaire simple",
      "tapGroupForm": "Formulaire à onglets",
      "expensionForms": "Formulaire accordéons",
      "pageFormPicture": "Image de la page d'exemple du formulaire",
      "stepperFormViewer": "Formulaire en étapes"
    },
    "accessibility": {
      "content": "Aller au contenu",
      "sitemap": "Plan du site",
      "principalmenu": "Aller au menu principal"
    }
  },
  "sitemap": {
    "title": "Plan du site",
    "contexte": "Changer de contexte"
  },
  "footer": {
    "logo": "Logo Berger-Levrault",
    "link": "Berger-Levrault (nouvelle fenêtre)",
    "messageAllRights": "Tous drois réservés",
    "copyright": "Copyright {{year}} @Berger-Levrault, "
  },
  "layout": {
    "panel.close": "Fermer panel",
    "leftmenu.title": "Menu",
    "leftmenu.button.close": "Fermer le menu",
    "common": {
      "search": {
        "placeholder": "Rechercher...",
        "title": "Rechercher",
        "pending": "Recherche en cours",
        "result": "Résultat",
        "results": "Résultats",
        "showresults": "Voir tous les résultats",
        "closebutton": "Fermer"
      },
      "notification.title": "Notifications"
    },
    "navbar": {
      "usermenu.title": "Menu utilisateur",
      "account.title": "Mon compte",
      "help.title": "Aide",
      "notification.title": "Notifications"
    }
  },
  "blelement": {
    "title": "BL.Elements",
    "description": "Voici une présentation des différents composants de la stack fonctionnelle.<br>Sont présentés ici des composants basiques de type input, boutons, listes déroulantes et des templates plus évolués tels que des tableaux."
  },
  "i18n": {
    "title": "Internationalisation",
    "subtitle": "Héritage de l'i18n sur les projets",
    "setup": "Mise en place",
    "assets": "Ajouter les assets des libs aux assets du projet",
    "package": "Ajouter la dépendance ngx-translate-multi-http-loader qui gère le multi-fichier",
    "module": "Mettre à jour le HttpLoaderFactory du projet",
    "in.file": "Dans le fichier",
    "override": "SUrcharge",
    "override.description": "Il suffit de redéfinir les clés dans les json du projet. Attention pour que cela fonctionne correctement, il faut bien définir dans le MultiTranslateHttpLoader les i18n des libs avant ceux du projet"
  },
  "blmd": {
    "link": {
      "text": "Lien vers la dernière version",
      "14": "https://designer.berger-levrault.com/14.0.0/designer"
    }
  },
  "viewer": {
    "declaration": "Déclaration",
    "codeExemple": "Code de l'exemple",
    "accessibility": "Accessibilité",
    "presentation": "Présentation",
    "input": {
      "title": "Input"
    },
    "output": {
      "title": "Output"
    },
    "form": {
      "title1": "Formulaire group 1",
      "title2": "Formulaire group 2",
      "title3": "Formulaire group 3",
      "title4": "Formulaire group 4",
      "valid": "Formulaire valide",
      "disabled": "Formulaire disabled",
      "error": "Erreur de formulaire",
      "terminate": "Terminer le traitement",
      "dialog": {
        "text": "Valeur du formulaire",
        "ok": "OK",
        "yes": "Oui",
        "validate": "Valider le formulaire",
        "close": "Close",
        "saved": "Formulaire sauvegardé"
      }
    }
  },
  "pages": {
    "dashboard-list": {
      "description": "Le composant TDB liste est réservé pour un usage uniquement sur le tableau de bord.Ce composant permet d'afficher sur la page d'accueil, une liste rapide pour montrer des informations que l'utilisateur aurait besoin de voir ou d'y accéder rapidement. Il ne peut être utilisé que dans le cadre du tableau de bord.",
      "first-example": "Cet exemple démontre l'affichage du séparateur entre les lignes, la désactivation de l'icône utilisateur et la redéfinition de la largeur du tableau à 95%.",
      "second-example": "Cet exemple démontre l'utilisation de la liste tableau de bord avec une fonction de recherche et sans icône d'utilisateur.",
      "third-example": "Cet exemple démontre l'utilisation de la liste tableau de bord avec une fonction de recherche et sans icône d'utilisateur.",
      "last-example": "Afin de désactiver le mode routing du composant et de personnaliser l'événement du clic sur une ligne, il faut mettre l'input routingMode à false",
      "event": "événement en cours"
    },
    "icon-picker": {
      "description": "Le sélecteur d'icône est un composant permettant de sélectionner une icône dans une liste donnée. Il peut être utilisé pour la personnalisation d'un composant par le client (ex: raccourci externe) ou par l'utilisateur selon les besoins projets. <br> \n Les icônes visibles dans la liste proviennent de phosphoricons en version light."
    },
    "color-picker": {
      "description": "Deux composants sont proposés comme sélecteur de couleur, le premier composant <code>bl-color-picker</code> permet de sélectionner une couleur dans une roue chromatique , et le deuxième composant <code>bl-color-circles</code> permet de choisir une couleur dans une palettes de couleurs prédéfinies.",
      "input": {
        "color": "La couleur initiale à affichée, par défaut #FFFFFF",
        "circles": {
          "colors": "La liste des couleurs à affichés dans le sélecteur de couleurs en cercles. Liste de listes : string[][]"
        }
      },
      "output": {
        "onColorChanged": "Optionnel. Evenement déclanché à chaque fois un changement de couleur est effectué.",
        "onChangeCompleted": "Optionel. Evenement déclanché une fois le choix de couleur est finalisé.",
        "formControl": "Le FormControl contenant la valeur du champ sélecteur de couleur"
      }
    },
    "checkbox": {
      "description": "Une case à cocher est un élément interactif qui permet à l'utilisateur de sélectionner une ou plusieurs options dans une liste.",
      "exemple1": "Checkbox modifiable",
      "exemple2": "Checkbox non modifiable initialisée par formControl",
      "exemple3": "Checkbox non modifiable initialisée par value"
    },
    "gauge": {
      "description": "La jauge permet d'afficher un ratio sous forme graphique circulaire.",
      "accessibility": "Afin de rendre le composant accessible il est nécessaire d'englober le composant dans une balise :"
    },
    "form-error": {
      "description": "Cette page présente comment faire un formulaire avec gestion d'erreurs.",
      "declaration": "<p>Une première étape est de bien créer votre formulaire à l'aide du FormGroup d'angular.</p><p>Il existe ensuite un composant d'affichage des erreurs, pour les afficher en haut du formulaire.</p><p>Ce dernier est lié à une directive qui permet d'ajouter aux 'controls' leur elementRef associé.</p><p>De plus, la gestion des messages (toast) est gérée par le projet shared.</p><p>Pour avoir ces fonctionnalités, il est nécessaire d'importer les modules BlSharedModule de @bl/shared et FormErrorModule de @bl/elements, le scss de @bl/shared et d'avoir la dépendance vers ngx-toastr:</p>",
      "form": {
        "firstName": "Prénom",
        "lastName": "Nom",
        "email": "Email",
        "address": "Addresse",
        "principal": "Résidence principale"
      },
      "doc": {
        "set-up": "Il est nécessaire d'importer dans le module de votre custom component le module FormErrorModule.<br><br>Ce dernier permet l'appel de la directive FormControlInjectElementRefDirective insérant automatiquement dans les<br>formControl et formControlName soit le nativeElement (pour des élements simples)<br>soit l'objet réel (pour les composants complexes).<br><br>Pour qu'un composant complexe puisse fonctionner avec bl-form-error-display, il faut qu'il implemente l'interface<br>GoToFirstErrorFocusableComponent du module @bl/elements (cf. source du composant EditableTableComponent)<br>",
        "access": "L'accessibilité est prise en compte par les composant Material Angular au niveau du formulaire.<br>Le focus est donné au composant listant les erreurs avec un délai de 0.5s afin de laisser le temps au lecteur écran delire les alertes.<br>Le message snackbar (ou Toast) est correctement lu par le lecteur écran sous Chrome mais pas sous FireFox. On attend de voir si les prochaines versions de FireFox corrigereont le problème.<br>",
        "usage": "Le formulaire doit avoir l'attribut 'formGroup' <br> Chaque champ du formulaire doit être accompagné de l'attribut 'formControlName' <br> Le composant qui permet l'affichage des erreurs en haut est '&lt;bl-form-error-display&gt;'<br> Voici un exemple de formulaire:<br>"
      }
    },
    "table_markedFor": {
      "description": "<p>La fonctionnalité table avec actions 'marquées pour' du BL-Table permet d'effectuer l'affichage d'actions CUD (Create, Update et Delete ) en local.</p><p>L'intérêt de celle-ci est d'aider l'utilisateur à visualiser les différent états de ses traitements avec un style prédéfini pour chaque type d'action au fur et à mesure de l'avancement de son scénario</p>"
    },
    "filter": {
      "description": "Exemple d'implémentation du composant bl-table-filter. Le composant organise les éléments en fonction du nombre d'éléments par ligne souhaité. <br>Si on souhaite appliquer un affichage spécifique il ne faut pas faire passer le nombre d'éléments et l'affichage sera celui configuré dans la page métier."
    },
    "bl-task": {
      "description": "Le composant 'Tâche' est équivalent à une action à réaliser, représenté graphiquement par une carte. Les tâches sont à utiliser sur des pages de type tableau de bord pour avoir une vision synthétique des actions, à un instant T : objet de la tâche, état, échéance de réalisation et boutons d'action."
    },
    "divider": {
      "description": "Ce composant permet de styliser une ligne de séparation avec des options d'orientation variées.",
      "exemple1": "Mes dossiers",
      "exemple2": "Un bouton",
      "exemple3": "Pourquoi pas un footer ?"
    },
    "templates": {
      "simpleTable": {
        "title": "Tableau simple",
        "description": "Cet exemple illustre l'utilisation du template simple pour afficher un tableau élémentaire"
      },
      "accessibility": {
        "title": "template d'accessibilité",
        "description": "<p>Le template d'accessibilité repose sur une architecture complexe de templates, construite autour d'un ensemble de cartes, ayant un squelette défini pour l'en-tête et le corps.</p><p>Les templates d'accessibilités  sont basées sur BlMultiCardTemplateComponent. </p>"
      },
      "editable-list": {
        "description": "Le template \"liste éditable\" se base sur un modèle simple. Il propose l'intégration d'une icône titre et d'un bouton en Header, un exemple d'implémentation de la liste éditable, ainsi que l'inclusion d'un corps et d'un pied de page..",
        "sampleTitle": "Template liste éditable"
      },
      "table-with-filter-up": {
        "description": "Page contenant un tableau et des filtres positionnés au dessus du tableau.",
        "sampleTitle": "Template tableau avec filtres en haut"
      }
    },
    "panels-template": {
      "description": "<p>Le but de ce modèle est de fournir dynamiquement un ensemble de formulaires enveloppés dans des éléments ExpansionPanel, ainsi qu'un titre de page, un logo et des boutons personnalisés par le métier.</p><p>Ce modèle se base principalement sur la structure du 'Template de page ' (voir la documentation dans la partie Template).  </p>",
      "affichage": "Affichage"
    },
    "bl-stepper": {
      "description": "<p>Ce composant offre une architecture de page avec étapes, comportant par défaut les actions 'Précédent' et 'Suivant' et 'Terminer'.</p><p> Pour définir une étape il suffit d'imbriquer votre contenue dans la balise <code>bl-step</code>.</p><p>Une liste d'actions globales est aussi permise en entrée du <code>bl-stepper</code></p> ",
      "config": "Affin d'exploiter les méthodes <code>nextStep()</code> et <code>previouseStep()</code> du composant stepper , vous devez ajouter un attribut de type <code>BlStepperComponent</code> en tant que <code>@ViewChild</code> dans votre sample",
      "input": {
        "editable": "Activer ou désactiver la possibilité de retourner en étape précédente après validation, par défaut activé.",
        "testLabelValue": "Surcharge pour les tests automatisés la valeur de testLabel du stepper."
      },
      "bl-step": {
        "input": {
          "title": "Libelé de l'étape.",
          "stepForm": "Formulaire de l'étape courante , pour le controle de validation d'une étape.",
          "testLabelValue": "Surcharge pour les tests automatisés la valeur de testLabel de l'étape."
        }
      }
    },
    "page-template": {
      "title": "Template de page",
      "description": "Ce composant représente une structure prédéfinie de la page <br> qu'on peux utilisé pour accélérer le dévelopement des interface html, et se focaliser sur le contenue métié.<br>",
      "usage": "<p>Afin d'exploiter ce template de page , le code si-dessous démontre les différentes parties à alimenter dans le modèle de page html :</p>"
    },
    "datatable": {
      "description": "Exemple d'implémentation du composant bl-table.<br>Côté HTML il y a juste la balise bl-table avec le fichier de config et éventuellement les composants de filtre à déclarer.<br>Tout le comportement est décrit dans le fichier typeScript en configurant le modèle <b>BlTableConfig</b>.<br>Si vous souhaitez rajouter des filtres, il suffit de positionner la balise <b>bl-table-filter</b> avec les éléments de filtre à l'intèrieur de la balise bl-table.",
      "doc-description": "Tout le paramétrage de la table est réalisé dans le fichier de config (modèle BlTableConfig)"
    },
    "filter-panel": {
      "title": "Titre à affiché en haut des filtres",
      "tableComponent": "Le composant bl-tabale sur qui on va appliquer les filtres, doit contenir les définition des méthodes search() et reset() des filtres."
    },
    "multi-attachment": {
      "description": "Exemple d'implémentation du composant bl-multi-attachment , ce composant permet d'entrer une ou plusieurs Pièces Jointes à une page ou un formulaire. ",
      "exemples": "Exemples",
      "doc": {
        "title1": "Pièce jointe Multiples",
        "required": "- Le champs est obligatoire :",
        "required-extentions": "- Les extensions requises dans l'exemple sont :",
        "maxSize": "- La taille maximal d'un fichier est précisé en input à  1500 ko :",
        "maxFilesNum": "- Le nombre de fichiers autorisés est 4 dans cet exemple :",
        "sizeFunc": "- La fonction de convertion de la taille du fichier convertie la taille en Mo :",
        "title2": "Avec personnalisation des message d'erreurs",
        "costumMsgErrors": "- Désactiver les messages d'erreurs par défaut avec le paramètre suivant :",
        "title3": "Pièce jointe en ReadOnly",
        "readonly": "- pour activer le mode lecture seul :"
      },
      "required-error": "Veuillez choisir les fichiers requis",
      "invalid-extentions": "Extension(s) invalide(s)",
      "nbFilesExceeded": "Veuillez ne pas dépasser 2 fichiers"
    },
    "abstract": {
      "quickSearch": {
        "description": "Si un composant quick search  est présente sur plusieurs pages, il est recommandé de se créer un composant métier.<br>Dans l'exemple quick search  status hérite de <b>BlQuickSearchAbstractComponent</b> et précise uniquement le chargement des données depuis le service métier.<br> Dans le template HTML on insère juste la balise <b>bl-quick-search-abstract</b> avec la surcharge de tous les input de l'abstract <br><ul><li>1. Dans le code de l'onglet TS(objet métier) on a l'implémentation métier.</li><li>2. Dans les onglets TS et HTML l'utilisation du composant métier dans une page (dans notre exemple la liste des statuts).</li></ul>Le formcontrol est de type <b>BlBasicObject</b> qui contient 3 valeurs: id, code(facultatif) et label. Si on souhaite initialiser la sélection , il faut lui faire passer un objet de type BlBasicObject, pareil pour les valeurs de la liste déroulante.<br><b>Important</b>: pour qu'une variable input soit prise en compte dans le composant métier il faut la redéfinir dans le template &lt;bl-auto-abstract&gt; du composant métier (Exemple [id]=\"id\" [appearance]=\"appearance\")"
      },
      "quicksearchmultiple": {
        "description": "Si un composant quick search multiple  est présente sur plusieurs pages, il est recommandé de se créer un composant métier.<br>Dans l'exemple quick search  status hérite de <b>BlQuickSearchMultipleAbstractComponent</b> et précise uniquement le chargement des données depuis le service métier.<br> Dans le template HTML on insère juste la balise <b>bl-quick-search-multiple-abstract</b> avec la surcharge de tous les input de l'abstract <br><ul><li>1. Dans le code de l'onglet TS(objet métier) on a l'implémentation métier.</li><li>2. Dans les onglets TS et HTML l'utilisation du composant métier dans une page (dans notre exemple la liste des statuts).</li></ul>Le formcontrol est de type <b>BlBasicObject[]</b> qui contient 3 valeurs: id, code(facultatif) et label. Si on souhaite initialiser la sélection , il faut lui faire passer des objets de type BlBasicObject, pareil pour les valeurs de la liste déroulante.<br><b>Important</b>: pour qu'une variable input soit prise en compte dans le composant métier il faut la redéfinir dans le template &lt;bl-auto-abstract&gt; du composant métier (Exemple [id]=\"id\" [appearance]=\"appearance\")"
      }
    },
    "basic": {
      "counter": {
        "description": "Le compteur du tableau de bord permet de mettre en avant une donnée chiffrée ainsi que son évolution sur une période définie. Il peut s'afficher en version tuile ou ligne selon les besoins du projet et la place disponible sur le tableau de bord."
      },
      "tableEditable2": {
        "description": "La liste éditable permet d'afficher une liste en édition, avec la possibilité de supprimer, d'ajouter ou de modifier une entrée de la liste. Les champs de la liste sont définit par le développeur.<br><strong>NB: </strong> Il est conseillé de priviligier d'usage des composants de la stack BL-Element pour éviter tout souci d'alignement des colonnes.",
        "dialog": {
          "form-uncompleted": "Formulaire en cours de modification !",
          "rollback": "Retourner à la liste",
          "unsave": "Quitter sans sauvegarder"
        }
      },
      "calendar": {
        "description": "Ce composant permet de sélectionner une ou plusieurs dates dans un calendrier."
      }
    },
    "select": {
      "description": "Cette page présente le composant \"Liste Déroulante\", qui offre la possibilité de sélectionner parmi plusieurs choix. Ce composant est couramment utilisé dans les interfaces utilisateur pour permettre aux utilisateurs de choisir une option parmi plusieurs. La liste déroulante peut être configurée pour afficher une liste de choix prédéfinis ou pour permettre à l'utilisateur de saisir une option personnalisée. Elle peut également être utilisée pour filtrer les résultats ou pour afficher des options supplémentaires en fonction des choix précédents de l'utilisateur. En somme, la liste déroulante est un composant essentiel pour les interfaces utilisateur qui nécessitent une sélection parmi plusieurs options.",
      "simple-list": "Liste déroulante simple",
      "multi-select-list": "Liste déroulante à « sélection multiple»",
      "select-list-with-search": "Liste déroulante avec recherche ",
      "select-list-in-group": "Liste déroulante avec regroupement ",
      "select-list-IG-desc": "Permer d'afficher la liste déroulante selon les catégories",
      "accessibility-info": "L'accessibilité est prise en compte par les composants Material Angular."
    },
    "shortcut": {
      "description": "Ce composant permet d'afficher des raccourcis internes au logiciel depuis la page d'accueil. Il permet de naviger rapidement vers une fonctionnalité du service."
    },
    "snackbar": {
      "description": "Les snackbars informent les utilisateurs sur l’état d’un processus réalisé ou à réaliser. Elles apparaissent temporairement à l'écran. Elles n’interrompent pas l'expérience utilisateur et par défaut, elles ne nécessitent pas d'intervention de sa part pour disparaître.",
      "example": "Pour des contraintes d'accessibilité, un paramètre permet de laisser le snackbar affiché à l'écran. Par défaut ce paramètre n'est pas activé. Lorsqu'il est activé, le snackbar a le comportement suivant :"
    },
    "date-picker": {
      "description": "Saisie d'une date avec possibilité de modifier le format et la langue d'affichage.<br><br>Exemple : 19/01/2023, Janvier 2023, Januray 2022,...<br><ul><li>Si aucun format renseigné, le composant prend par défaut le format DD/MM/YYYY.</li><li>Si aucun locale renseigné, le composant s'adapte à la langue par défaut du système.</li></ul><br>Important : Pour modifier le format d'affichage du calendrier (DatePicker), il faut modifier la valeur du MAT_DATE_FORMATS comme suit : <br><ul><li>providers: [{provide: MAT_DATE_FORMATS, useValue: NOUVEAU_FORMAT}].<li>NOUVEAU_FORMAT est de type MatDateFormats, voir les examples : BL_DATE_DD_MM_YYYY_FORMATS et BL_DATE_YYYY_MM_FORMATS."
    },
    "date-picker-range": {
      "description": "Saisie d'une plage de dates avec possibilité de modifier le format et la langue d'affichage<br><br>Exemple : 19/01/2023, Janvier 2023, Januray 2022,...<br><ul><li>Si aucun format renseigné, le composant prend par défaut le format DD/MM/YYYY</li><li>Si aucun locale renseigné, le composant s'adapte à la langue par défaut du système</li></ul><br>Important : Pour modifier le format d'affichage du calendrier, il faut modifier la valeur du MAT_DATE_FORMATS comme suit : <br><ul><li>providers: [{provide: MAT_DATE_FORMATS, useValue: NOUVEAU_FORMAT}]<li>NOUVEAU_FORMAT est de type MatDateFormats, voir les examples : BL_DATE_DD_MM_YYYY_FORMATS et BL_DATE_YYYY_MM_FORMATS."
    },
    "period": {
      "description": "Saisie d'une période au format Année.mois (Exemple: 2022.09). Le formcontrol est de type string , on passe et on récupère la valeur au format AAAA.MM"
    },
    "time": {
      "description": "Le composant Heure permet de saisir des heures.",
      "declaration": "Pour déclarer un composant heure, il est nécessaire d'importer le module TimeModule de @bl/elements dans le module de votre composant : ",
      "doc": {
        "access": "L'accessibilité est prise en compte par le composant standard Material Angular.<br>",
        "usage": "L’utilisateur ne peut saisir que des caractères numériques et un séparateur (caractères alphabétiques non autorisés) <br> Le contenu de la zone est formaté à la validation /sortie de la zone. <br>"
      }
    },
    "year-picker": {
      "description": "Saisie d'une année au format YYYY<br><br>Exemple : 2023"
    },
    "attachment": {
      "description": "Cette page présente le composant Pièce Jointe permettant l'ajout de fichiers à une page ou un formulaire.",
      "declaration": "<p>Une première étape est de bien créer votre formulaire à l'aide du FormGroup d'angular</p><p>Il est nécessaire d'importer le module BreadCrumbModule de @bl/elements pour avoir le composant d'affichage du fil d'ariane</p>"
    },
    "horizontal-gauge": {
      "description": "Le composant jauge horizontale permet de montrer l’avancement d’une activité/d’une donnée par rapport à une prévision."
    },
    "text-area": {
      "description": "Grâce à la zone de texte, les utilisateurs peuvent exprimer leurs idées de manière détaillée, formuler des réflexions approfondies, ou fournir des informations précises. Elle permet également de manipuler et de modifier le contenu en utilisant des fonctionnalités telles que la sélection, la copie, la découpe et le collage.",
      "declaration": " Afin d'utiliser les Zones de textes dans BL.ELEMENT , il faut importer le composant bl-text-area  ainsi que de suivre les différents Inputs de cet élement."
    },
    "close-alert": {
      "description": "La boite de dialogue \"Alerte fermeture\" s'affiche uniquement lorsque l'on se trouve sur un formulaire non enregistré."
    },
    "workflow": {
      "description": "Différent de l'assistant Stepper, ce composant permet à un utilisateur de se situer par rapport l'avancement ou l'état d'un workflow. Le but est de fournir une vue d'ensemble d'un processus.\nIl peut également être utilisé pour représenter l'avancement dans le temps. Exemple : un historique.",
      "declaration": "<p>Pour bien configurer le composant Workflow, il est nécessaire de suivre l'objet de configuration situé ci-dessous.</p><p>Le champ 'état' est spécialement conçu pour indiquer l'état de notre étape, prenant en paramètre un énum de type WorkflowEtatEnum. Par défaut, ils prennent la valeur 'noncomplette'.</p><p> Le champ 'élément' sert à indiquer le type de composant à afficher. Il est strictement limité à trois types de composants : 'bl-button', 'bl-hyperlink' et 'label'.</p>"
    },
    "chips": {
      "description": "Les chips sont des éléments compacts, pouvant avoir plusieurs fonctions : Afficher un filtre actif, afficher une information, faire une sélection ou ajouter du contenu."
    },
    "sticky-header": {
      "description": "Le composant 'sticky-header' permet de maintenir le titre en position fixe lorsque l'on fait défiler vers le haut."
    },
    "list": {
      "description": "Liste déroulante, multi combo, et autocomplete permettent de ne pas faire de composant métier et de faire passer la liste de valeurs directement depuis la page métier.<br>Il est recommandé d'utiliser ces composants là lorsqu'une liste apparait dans un seul écran et qu'il n'est pas nécessaire d'en faire un composant métier.<ul><li>- bl-autocomplete : liste déroulante avec aide à la saisie.</li><li>- bl-list-box: liste déroulante basique.</li><li>- bl-multi-combo: liste avec sélection multiple.</li></ul>Le formcontrol est de type <b>BlBasicObject</b> qui contient 3 valeurs: id, code(facultatif) et label. Si on souhaite initialiser la sélection , il faut lui faire passer un objet de ce type là, pareil pour les valeurs de la liste.<br>Attention : pour la liste déroulante, pour avoir la valeur 'Aucun' ou 'Tous' il faut positionner addNullableOption à true (false par défaut) et mettre dans le placeholder Aucun ou Tous. Si cette valeur est sélectionnée, l'objet retourné aura comme valeur null."
    },
    "lists": {
      "listbox": {
        "description": "Si une liste déroulante est présente sur plusieurs pages, il est recommandé de se créer un composant métier.<br>Dans l'exemple la liste status hérite de <b>BlListBoxAbstractComponent</b>  et précise uniquement le chargement des données depuis le service métier.<br> Dans le template HTML on insère juste la balise <b>bl-list-box-abstract</b> avec la surcharge de tous les input de l'abstract.<br><ul><li>1. Dans le code de l'onglet TS(objet métier) on a l'implémentation métier.</li><li>2. Dans le TS et HTML l'utilisation du composant métier dans une page (dans notre exemple la liste des statuts).</li></ul>Le formcontrol est de type <b>BlBasicObject</b> qui contient 3 valeurs: id, code(facultatif) et label. Si on souhaite initialiser la sélection , il faut lui faire passer un objet de ce type là, pareil pour les valeurs de la liste.<br>Attention : pour la liste déroulante, pour avoir la valeur 'Aucun' ou 'Tous' il faut positionner addNullableOption à true et mettre dans le placeholder Aucun ou Tous. Si cette valeur est sélectionnée, l'objet retourné aura comme valeur null.<br><b>Important</b>: pour qu'une variable input soit prise en compte dans le composant métier il faut la redéfinir dans le template &lt;bl-list-box-abstract&gt; du composant métier (Exemple [id]=\"id\" [appearance]=\"appearance\")"
      },
      "multicombo": {
        "description": "Si une liste à sélection multiple est présente sur plusieurs pages, il est recommandé de se créer un composant métier.<br>Dans l'exemple la multi combo status étend <b>BlMultiComboAbstractComponent</b>  et fait appel au template <bl-multi-combo-abstract> pour hériter du HTML. On précise uniquement le chargement des données depuis le service métier dans le composant métier. Cela permet de ne pas dupliquer la partie subscribe au service dans chaque page qui l'utilise.<br><ul><li>1. Dans le code de l'onglet TS(objet métier) on a l'implémentation métier.</li><li>2. Dans le TS et HTML l'utilisation du composant métier dans une page (dans notre exemple la multi combo des statuts).</li></ul>Le formcontrol est un tableau de type <b>BlBasicObject</b> qui contient 3 valeurs: id, code(facultatif) et label. Si on souhaite initialiser la sélection , il faut lui faire passer un tableau d'objets de BlBasicObject, pareil pour les valeurs de la liste déroulante..<br><b>Important</b>: pour qu'une variable input soit prise en compte dans le composant métier il faut la redéfinir dans le template &lt;bl-multi-combo-abstract&gt; du composant métier (Exemple [id]=\"id\" [appearance]=\"appearance\") "
      },
      "search-abstract": {
        "description": "Si un composant search est présent sur plusieurs pages, il est recommandé de se créer un compoant métier autonome.<br>Dans l'exemple le search status hérite de l'abstractSearch et précise uniquement le chargement des données depuis le service métier.<br>Dans le code de l'onglet TS(objet métier) on a l'implémentation métier.<br>Dans le TS et HTML l'utilisation du composant métier dans une page (dans notre exemple la liste des statuts)'"
      }
    },
    "style": {
      "number-chip": {
        "description": "Ce composant est une pastille numérique qui permet d'afficher un nombre avec un fond coloré. Il peut être utilisé pour afficher des indicateurs de performance, des statistiques ou des données numériques.",
        "sample-title1": "Exemple de pastille numérique par défaut :",
        "sample-title2": "Exemple de pastille positionné en bas :",
        "sample-title3": "Exemple de pastille avec couleur prédéfinit :",
        "notif": "Notifications",
        "folders": "Dossiers reçus",
        "all-files": "Tous les fichiers",
        "archived": "Fichiers Archivés",
        "deleted": "Fichiers Supprimés"
      },
      "bubble-icon": {
        "description": "Le composant Bulle avec icône est un composant de la nouvelle Home Page du projet WeMagnus. \n\nC'est une représentation graphique personnalisable."
      },
      "marketing-panel": {
        "description": "Ce composant est un bandeau qui enveloppe une liste de cartes cliquables, il est notament utilisé dans le composant carte de navigation. "
      },
      "label": {
        "subtitle": "Le label est un style qui permet de mettre en avant une information."
      },
      "label-counter": {
        "description": "Le composant compteur permet d’afficher un compteur numérique d’éléments, il s’agit d’un composant d’affichage uniquement, le contenu est à décider par le métier.\n"
      },
      "nav-card": {
        "infobulle": "Infobulle",
        "info": "Cliquez pour voir plus d'informations",
        "description": "<p>La nouvelle carte de navigation est présentée sous forme de popup contenant un menu vertical de catégories.Chaque catgégorie peux contenir plusieurs liens externes</p><p>En mode mobile les catégories sont affichées en accordéons ouvrables une à la fois.</p>",
        "declaration": "<p>La carte de navigation attend en entrée un objet de type <code>NavCardGroup[]</code></p><p> En utilisant le composant dialogue générique, vous pouvez passer l'objet <code>NavCardGroup[]</code> depuis le paramètre <code>data</code> </p><p>de la configuration du dialogue <code>BlGenericDialogConfig</code>. puis alimenter le paramètre <code>groupsData</code> du composant <code>bl-nav-card</code> </p> voir l'exemple si-dessous.",
        "exemple1": "Contenu de la carte de navigation :",
        "exemple2": "Carte de navigation dans un dialogue générique :",
        "codeExemple": "Code de l'exemple du dialog : ",
        "categorie1": {
          "nom": "Récents",
          "liens": {
            "lien1": "Premier lien",
            "lien2": "Deuxième lien",
            "lien3": "Troisième lien",
            "lien4": "Quatrième lien",
            "lien5": "Cinquième lien",
            "lien6": "Sixième lien",
            "lien7": "Septième lien",
            "lien8": "Huitième lien",
            "lien9": "Neuvième lien",
            "lien10": "Dixième lien",
            "lien11": "Onzième lien",
            "lien12": "Douzième lien",
            "lien13": "Treizième lien",
            "lien14": "Quatorzième lien"
          }
        },
        "categorie2": {
          "nom": "We Magnus",
          "liens": {}
        },
        "categorie3": {
          "nom": "Gestion financière",
          "liens": {
            "lien1": "Premier lien",
            "lien2": "Deuxième lien",
            "lien3": "Troisième lien",
            "lien4": "Quatrième lien"
          }
        },
        "categorie4": {
          "nom": "Gestion ressources humaine",
          "liens": {
            "lien1": "Premier lien",
            "lien2": "Deuxième lien",
            "lien3": "Troisième lien",
            "lien4": "Quatrième lien",
            "lien5": "Cinquième lien",
            "lien6": "Sixième lien",
            "lien7": "Septième lien",
            "lien8": "Huitième lien",
            "lien9": "Neuvième lien",
            "lien10": "Dixième lien"
          }
        },
        "categorie5": {
          "nom": "Gestion de stoque",
          "liens": {
            "lien1": "Premier lien",
            "lien2": "Deuxième lien",
            "lien3": "Troisième lien",
            "lien4": "Quatrième lien"
          }
        },
        "categorie6": {
          "nom": "Transverse",
          "liens": {}
        },
        "marktng-panel": {
          "card1": "Première fiche",
          "card2": "Deuxième fiche",
          "card3": "Troisième fiche",
          "card-text": "Description de la fiche de publicité spécifique"
        }
      },
      "icon": {
        "description": "Bibliothèque d'icones<br>Les constantes sont déclarées dans la class IconClassEnum dont voici la liste. Il est possible d'en rajouter bien évidemment.<br>L' utilisation de ces constantes facilitera les éventuels réfactos si on change de librairie d'icones.<br>Deux façons de faire passer la valeur de l'iconClassName : soit en déclarant l'enum côté TS et de la référencer dans le HTML, soit en faisant passer la key en tant que chaine de caractères directement.<br>Il est possible de référencer une icone via la chaine de caractères directement exemple ph ph-circle mais cela n'est pas conseillé."
      },
      "button-link": {
        "description": "Le composant bouton de lien offre un style de bouton contenant une icône à gauche et permet de naviger vers un lien externe ou bien de définir son chemin de navigation dans l'application.",
        "text1": "Lien externe",
        "text2": "Page d'accueil",
        "text3": "12 456789 1234567 901 34567890 123",
        "tooltip-long": "Text du tooltip",
        "text4": "Action spécifique",
        "text5": "Ce bouton lien n'a pas de bordure",
        "external-link": "Exemple de bouton vers un lien externe :",
        "specific-link": "Exemple de bouton vers une page interne :",
        "long-text": "Exemple de bouton lien avec un texte long :",
        "simple-icon": "Bouton lien avec icone simple :",
        "specificStyle": "Afficher le style spécifique métier :",
        "borderless-wraped-link": "Exemple de bouton lien sans bordure et avec possibilité d'afficher un texte long :"
      },
      "button": {
        "description": "Permet d'ajouter un bouton avec différents rendus possible. L'utilisation des icones est facilité via l'enum d'icone disponible. <br><br>Pour rendre un bouton flottant, il faut appliquer à son conteneur le style \"position: sticky;\" et \"bottom: 10px;\" pour le positioner en bas avec un margin de 10px ou \"top: 0;\" pour le positioner en haut."
      },
      "split-button": {
        "description": "Le split button est un bouton séparé en deux qui permet de réaliser une action rapide en cliquant sur le bouton principal (gauche) et d’afficher une liste déroulante contenant des sous-actions de l’action principale, en cliquant sur le chevron (droite). Le bouton primaire / secondaire peut contenir du texte uniquement ou une icône + texte. Dans ces deux cas, les entrées du menu déroulant seront sous la forme d’un texte. <b>bl-split-button</b> prend en paramètre un tableau de boutons de type <b>BlAction</b>."
      },
      "vertical-menu": {
        "description": "Menu d'action vertical qui prend en paramètre un tableau de type <b>BlAction</b>. Chaque élément BlAction décrit une action avec entre autre son label, l'évent emitter, si c'est disabled et aussi le message de confirmation si besoin."
      },
      "transverse-menu": {
        "description": "Menu d'action transverse qui prend en paramètre un tableau de type <b>BlMenuAction</b>.</br>Chaque élément BlMenuAction décrit un élément du menu transverse, avec entre autre, un idAction et un label (obligatoires), et un sous-menu (subMenu - facultatif) si vous voulez définir un sous-menu."
      },
      "matformfield": {
        "title": "Apparence des champs de saisie",
        "subtitle": "Propriété permettant de changer le rendu du composant (par défaut 'fill' est sélectionné).<br>Le paramètre 'appearance' peut être surchargé pour tous les composants de type input.<br>Si le composant est utilisé dans une liste saisissable, lui affecter le format standard.",
        "apply.title": "Appliquer un style",
        "autocomplete": "Autocomplete",
        "month-picker": "Month-picker"
      },
      "callout": {
        "description": "Le style Callout est une mise en forme du contenu éditorial. Elle permet de mettre en évidence une information sans bloquer l’interaction. <br> Il existe 5 styles différents : <br> &emsp; • Par défaut <br> &emsp; • Information <br> &emsp; • Succès <br> &emsp; • Avertissement <br> &emsp; • Erreur <br> Ces styles sont à positionner près des éléments qui leur sont associés. Ils peuvent s'étendre pour remplir la largeur du conteneur dans lequel ils se trouvent. <br> Pour information le style 'Par défault' n'a pas de picto."
      },
      "fab-menu": {
        "description": "Au clic sur le bouton flottant, les sous-actions s'affichent et l'icône du bouton flottant principal devient une croix."
      },
      "notification": {
        "description": "Cette page explique comment déclarer et utiliser la notion de notifications portée par BL-Layout. La mise à jour de la valeur du badge doit être réalisé par code. Le composant est visuel, il n'y a pas de notification push proposée depuis le serveur.",
        "declaration": "L'affiche du bouton de notification et la redirection sont définis dans l'objet appConfig utilisé par BL-Layout.",
        "accessibility": "L'accessibilité est prise en compte par le composant.\n"
      },
      "notification-modal": {
        "description": "Cette page explique comment déclarer et utiliser la notion de notifications en mode modale. Le composant affiche les données de type liste de NotificationItem[]. La modal affiche les cinq dernières notifications groupées par catégorie. Le composant offre la possibilité d'intégrer un code spécifique dans la partie header à droite par défaut un boutton 'Tout effacer' est affiché.",
        "exemple1": "Exemple avec 5 notifications :",
        "customHeader":"Exemple avec des actions header personnalisées :"
      },
      "tab-group": {
        "description": "Ce composant offre une structure multi onglets avec les boutons 'Suivant' et 'Précédent', et la possibilité de définir des actions métier."
      },
      "imageWithContent": {
        "description": "Ce composant représente une image avec du contenu flottant , principalement des boutons"
      }
    },
    "variables": {
      "bubble-icon": {
        "iconName": "Nom de l'icône à afficher (IconClassEnum,String)",
        "color": "couleur de la bulle (Blue,Rouge,Orange)",
        "bubbleRotation": "Rotation de la bulle (Gauche,Droite,Haut,Bas)",
        "bubbleSize": "Largeur de la bulle (XS,S,M,L)",
        "zoomAnimation": "Animation simulant le battement d'un cœur",
        "dingDingAnimation": "Animation simulant  une cloche qui sonne",
        "iconSize": "Largeur de l'icone",
        "bubbleClassCustomizedColor": "Classe CSS spécéfique a la bulle"
      },
      "breadcrumb": {
        "input": {
          "parent": "Liste des pages parentes/précédentes au format { text: string, link: string }.",
          "current": "Page courante au format string.",
          "bgcolor": "Couleur du background.",
          "arialabel": "L'aria-label du composant (par défaut breadcrumb).",
          "testlabelvalue": "testlabel de l'élément courant."
        },
        "description": "Le fil d'ariane est un élément de repère et un système de navigation. Il indique la position courante de l'utilisateur dans l'arborescence du site par rapport à la page d'accueil. Il permet de revenir en un clic sur les pages « parentes ».<br>Les pages précédentes (pages parentes) sont cliquables et affichées en bleu primaire. C'est le même style que les liens.<br>La page actuelle est non cliquable. Style de texte normal."
      },
      "close-alert": {
        "changed": "Paramètre qui permet de contrôler l'état du formulaire (par défault false)"
      },
      "autocomplete": {
        "description": "Si une liste autocomplete est présente sur plusieurs pages, il est recommandé de se créer un composant métier.<br>Dans l'exemple l'auto complete status hérite de <b>BlAutoAbstractComponent</b> et précise uniquement le chargement des données depuis le service métier.<br> Dans le template HTML on insère juste la balise <b>bl-auto-abstract</b> avec la surcharge de tous les input de l'abstract <br><ul><li>1. Dans le code de l'onglet TS(objet métier) on a l'implémentation métier.</li><li>2. Dans les onglets TS et HTML l'utilisation du composant métier dans une page (dans notre exemple la liste des statuts).</li></ul>Le formcontrol est de type <b>BlBasicObject</b> qui contient 3 valeurs: id, code(facultatif) et label. Si on souhaite initialiser la sélection , il faut lui faire passer un objet de type BlBasicObject, pareil pour les valeurs de la liste déroulante.<br><b>Important</b>: pour qu'une variable input soit prise en compte dans le composant métier il faut la redéfinir dans le template &lt;bl-auto-abstract&gt; du composant métier (Exemple [id]=\"id\" [appearance]=\"appearance\")"
      },
      "common": {
        "id": "id de l'élément dans le dom",
        "formControl": "nécessaire pour piloter le contrôle et accéder aux propriétés et méthodes",
        "label": "libellé affiché pour nommer le composant",
        "placeholder": "Texte affiché au clic dans le composant de saisie lorsqu'il est vide ou au survol selon le type de composant",
        "testLabelValue": "Surcharge pour les tests automatisés la valeur de testLabel",
        "appearance": "Paramètre de type MatFormFieldAppearance permettant de modifier l'aspect du composant ('legacy' | 'standard' | 'fill' | 'outline')",
        "clearSearch": "Booléen si true permet d'effacer le contenu",
        "calculateMaxLength": "Activer le compteur des chaînes de caractères en tant que matHintEnd",
        "suffixHint": "Afficher votre suffix personnalisé",
        "hintValue": "Affichez votre hint personnalisé en dessous du composant."
      },
      "marketing-panel": {
        "description": "Ce composant est un bandeau qui enveloppe une liste de cartes cliquables, il est notament utilisé dans le composant carte de navigation. ",
        "empty": "Le Bandeau marketing est vide !",
        "marketingPanel": "Objet en entrée de type : MarketingPanel{ title : string ;\n containers : MarketingContainer[];}",
        "marketingContainer": "  {\n  title : string,\n  icon? : IconClassEnum, iconSquare? : boolean ,\n  iconColor? : string,\n  content : string,\n  link : string}"
      },
      "nav-card": {
        "input": {
          "groupsData": "Obligatoir. de type NavCardGroup[]. C'est la donnée qui transit dans la carte de navigation.",
          "NavCardGroup": "{ id?: string; name: string; icon? : IconInfos; links : NavCardLink[];  testLabel : string; marketingPanel : MarketingPanel}",
          "NavCardLink": "{ title: string; path: string; icon? : IconInfos; iconSquare? : boolean ;iconColor? : string, infoBull? :string;  testLabel : string }",
          "MarketingPanel": "Données du bandeau marketing. Facultatif : { title : string , containers : MarketingContainer[] }",
          "MarketingContainer": "{ title : string , icon? : IconClassEnum , iconColor?, content : string , link : string }",
          "disableAnimation": "Facultatif. Désactiver l'animation de la carte de navigation. Par défaut 'false'.",
          "selectedIndex": "L'index du groupe à afficher à l'ouverture de la carte de navigation , par défaut 0."
        }
      },
      "no-data": {
        "description": "Ce composant représente un message de retour à l'utilisateur, constitué d'un texte et d'un picto. Le picto et le texte peuvent être costumisés.",
        "card-exemple": "Avec une icone costumisée via le paramètre 'picto'",
        "exemple1": "Affichage du composant seul",
        "title1": "Aucun Dossier",
        "subtitle1": "Pour ajouter un dossier, appuyer sur le '+'",
        "exemple2": "Cas d'utilisation dans une carte :",
        "title-card": "Derniers dossiers consultés",
        "title2": "Aucun dossier",
        "input": {
          "picto": "L'icone à affiché dans le message de retour, par défaut 'dossier ouvert'.",
          "title": "Facultatif, titre en gras en dessous de l'icone",
          "subtitle": "Facultatif , un texte descriptif au dessous du titre. "
        }
      },
      "imageWithContent": {
        "description": "Ce composant représente une image avec du contenu flottant , principalement des boutons"
      },
      "number-chip": {
        "chipColor": "Couleur de la pastille , par défaut vert",
        "numberColor": "Couleur du nombre affiché dans la pastille , par défaut blanc",
        "alignChip": "Alignement de la pastille {top , bottom} par défaut en top.",
        "testLabel": "Valeur de test pour les tests automatisés"
      },
      "imageWithVariable": {
        "imageSrc": "Source de l'image à afficher",
        "imageClass": "La classe à affecter pour l'image",
        "imageStyle": "style à appliquer pour l'image",
        "imageDescription": "description de l'image",
        "floatButonsTopPercentPosition": "positionnement TOP des enfants par rapport à l'image (par défaut 50%)",
        "floatButtonsLeftPercentPosition": "positionnement LEFT des enfants par rapport à l'image (par défaut 50%)",
        "floatButtonsRightPercentPosition": "positionnement RIGHT  des enfants par rapport à l'image (par défaut 50%)",
        "transparentChildren": "Boutons mode transparent",
        "testlabel": "valeur du testlabel"
      },
      "button-link": {
        "input": {
          "text": "Texte du bouton tronqué à partir de 30 caractères",
          "icon": "Icone du bouton de type IconClassEnum. Par défaut 'IconClassEnum.arrow_up_right'",
          "iconColor": "Couleur de l'icone du bouton, par défaut 'bleu claire'",
          "iconSize": "Taille de l'icone , 1 2 ou 3",
          "iconSquare": "Boulean, indique si l'icone est une bl-icone-square ou bien une bl-icon simple. par défaut icone-square",
          "externalPath": "Lien externe du bouton. Facultatif",
          "tooltipText": "Text à afficher au survole sur le bouton",
          "borderless": "Pour désactiver la bordure du boutton . par défaut activé.",
          "truncate": "Défnir si le text du boutton vas être tronqué ou non . par défaut tronqué.",
          "wrapText": "Activer la retoure à la ligne . désactivé par défaut",
          "textStyle": "Classes de style spécifique à appliquer sur le text du bouton",
          "testLabel": "Valeur de test pour les tests automatisés",
          "derivedBorderRadius": "Activation de bordures spécifiques : (dans le cas du logo Berger-Levrault, par exemple)"
        },
        "output": {
          "clickEvent": "Evènement déclanché au click sur le bouton"
        }
      },
      "dashboard-list": {
        "Input": {
          "searchHeader": "label de l'entête du composant (par défaut Dossiers)",
          "searchBodyLabel": "Label du corps (par défaut : Derniers dossiers consultés",
          "cardWidth": "La largeur de la carte ",
          "data": "data à transmettre au composant de type Map<any, BlDashboardData>",
          "enableSearch": "activer la recherche",
          "headerActionButton": "action pour le bouton d'êntete",
          "displayHeaderActionButton": "affichage du bouton d'entête",
          "testLabelValue": "valeur de test",
          "placeHoderSearch": "message a afficher au sein de la rechercher",
          "tooltip": "tooltip du bouton header",
          "displayUserIcon": "Affichage de l'icone utilisateur",
          "routingMode": "mode qui permet de naviguer au sein de l'application",
          "enableDividerBetweenRows": "Activer l'effet devider pour les lignes",
          "tableInsideDashboardWidth": "Définir la largeur du tableau qui se trouve au sein de la carte"
        },
        "Output": {
          "rowClick": "Evenement click sur la ligne"
        }
      },
      "label": {
        "labelValue": "Valeur du label",
        "labelState": "Statut de label (Default, Primary , Success , Info , Warning , Danger) l'utilisation de l'enum LabelState est nécessaire",
        "testLabelValue": "Surcharge pour les tests automatisés la valeur de testLabel"
      },
      "label-counter": {
        "labelValue": "Valeur affichée dans le composant",
        "labelState": "Statut de label(Info,Warning,Error,Success)",
        "labelClass": "Classe Css à ajouter si nécessaire",
        "testLabelValue": "Surcharge pour les tests automatisés la valeur de testLabel",
        "iconLabel": "Icone dans le libéllé"
      },
      "hyperlink": {
        "description": "Le lien hypertexte facilite la navigation. Il permet d'accéder à une autre page, au sein de l'application ou à l'extérieur de l'application.",
        "text": "Texte affiché, peut être complété par des icônes ou des images",
        "link": "URL du lien",
        "arrow": "Flèche à gauche du lien affiché par défaut (par défaut :true)",
        "title": "Tooltip",
        "testLabelValue": "Déstiné pour les tests ",
        "optionalStyle": "Paramètre pour appliquer un style optionnel sur le composant (par défaut : block), 'inline-flex' pour un affichage en ligne",
        "hyperlinkClick": {
          "title": "Lien vers Berger Levrault (nouvelle fenêtre)",
          "text": "Lien vers   Berger Levrault avec flèche",
          "textWithoutArrow": "Lien sans flèche"
        }
      },
      "memo": {
        "description": "Dérivé du composant 'Tâche', le composant 'Mémo' est l'équivalent d'un \"Post-it\".",
        "inputs": {
          "noteInformation": "Utilisez BlNoteModel afin d'instancier votre mémo ",
          "noteActions": "Boutons pérsonnalisées pour chaque note de la mémo",
          "testLabelValue": "valeurs de tests",
          "showShadowTertiary": "afficher l'effet ombre dans le thème tertiaire"
        },
        "messages": {
          "lengthMessage": "Vous ne devez pas dépasser 150 caractères dans votre paragraphe.",
          "important": "Important",
          "exampleLengthMessage": "Le dépassement de 150 caractères dans le texte du mémo va générer automatiquement un erreur :",
          "exampleUrgentMessage": "Afin d'afficher un ticket urgent vous devez mettre isImportant à true ",
          "memoExample": "bl-memo vous offre le choix entre 4 couleurs"
        }
      },
      "counter": {
        "lineVersion": "Version ligne (par défaut true).",
        "cardVersion": "Version carte (par défaut false).",
        "title": "Titre.",
        "subtitle": "Sous-titre.",
        "mainNumber": "Nombre principal.",
        "icon": "Icone (version carte).",
        "ascend": "Définir si le compteur est  positif.",
        "descend": "Définir si le compteur est négatif.",
        "stable": "Définir si le compteur est  stable.",
        "customColors": "Couleurs personnalisés.",
        "points": "Liste des points à schématiser. ",
        "resultOperation": "L'état d'affichage à coté de l'icone (version carte)."
      },
      "accessibility_template": {
        "pageTitle": "Titre de la page ",
        "titlesList": "Titre des cartes",
        "pageIcon": "Icone de La page",
        "sameHeightCards": "Affichage de cartes horizontales avec la même hauteur (par défaut true)",
        "headerCloseButton": "Le bouton Fermer  du header (false dans notre cas)"
      },
      "date-picker-range": {
        "startDate": "formControl nécessaire pour piloter le contrôle et accéder aux propriétés et méthodes",
        "endDate": "formControl nécessaire pour piloter le contrôle et accéder aux propriétés et méthodes",
        "minRange": "Date à partir de laquel on peux choisir une plage de dates. Optionel",
        "maxRange": "Date maximal qu'on peux choisir comme date de fin de la plage de dates. Optionel"
      },
      "divider": {
        "inset": "inset (par défaut : false)",
        "vertical": "Lignes verticales (par défaut : false)",
        "style": "Style appliqué au divider (par défaut : vide)"
      },
      "checkbox": {
        "color": "Couleurs a utiliser par défaut primary",
        "required": "Requis (par défaut : false) ",
        "readonly": "Readonly (par défaut : false) ",
        "value": "valeur de checkbox (utilisable uniquement si readonly est à true)",
        "title": "titre de la checkbox",
        "id": "id de la checkbox",
        "disabled": "Déactiver la checkbox (par défaut false)",
        "disableRipple": "Déactiver Ripple (par défaut false)",
        "formControl": "formControl de la checkbox",
        "arialabel": "arialabel de la checkbox",
        "testLabel": "arialabel de la checkbox",
        "checked": "définir si la checkbox est checked (par défaut false)",
        "indeterminate": "définir si la checkbox est indeterminate (par défaut:false)"
      },
      "slide-toggle": {
        "description": "Ce composant permet de basculer entre deux états distincts : activé et désactivé(\"On\" et \"Off\").",
        "label": "Il décrit l'option contrôlée, doit décrire ce que fera le bouton lorsqu'il est activé, il ne doit pas être neutre ou ambigu.",
        "isVertical": "définir si le slide toggle est vertical (par défaut false)",
        "disabled": "Déactiver le slide toggle (par défaut false)",
        "formControl": "formControl du slide toggle",
        "color": "color du slide toggle (par défaut: primary)",
        "testLabel": "testLabel du slide toggle"
      },
      "tableEditable2": {
        "i18nStatusLabel": "Le texte ou la clef i18n du titre de la colonne statut",
        "i18nAdd": "CLe texte ou la clef i18n du mot 'Ajouter",
        "i18nAddedLine": "Le texte ou la clef i18n du texte 'Ligne ajoutée",
        "i18nEditedLine": "Le texte ou la clef i18n du texte 'Ligne éditée'",
        "i18nDeletedLine": "Le texte ou la clef i18n du texte 'Ligne supprimée'",
        "i18nNoModifiedLine": "Le texte ou la clef i18n du texte 'Ligne non modifiée'",
        "i18nActionLabel": "Le text ou la clé i18n du libellé 'Actions'",
        "title": "Le titre de la liste éditable",
        "statusColumnClass": "La classe css à appliquer sur la colonne de statut",
        "canAddRow": "Ligne ajoutable",
        "canDeleteRow": "deleteButton",
        "restoreButton": "de type EditableTableRestoreButton2 : permet la redéfinition du button restaurer ",
        "cols": "Les colonnes de la liste éditable",
        "testLabelValue": "Surcharge pour les tests automatisés la valeur de testLabel",
        "tableFormArray": "Formulaire regroupant les données affichées par ligne",
        "afterInitAddForm": "Evénement emit après l'initalisation",
        "afterRowDelete": "Evénement emit après la suppression d'une ligne",
        "afterAddRow": "Evénement emit après l'ajout d'une ligne",
        "afterNewRowDeleted": "Événement émis après la suppression d'une ligne fraîchement ajoutée.",
        "onChangeAddForm": "Evénement emit après chaque changement dans le formulaire d'ajout d'élément dans la liste"
      },
      "periode": {
        "mindate": "Date minimum sélectionnable dans le datepicker au format année.mois(yyyy.mm)"
      },
      "list": {
        "lst": "Tableau d'objet de type BlBasicObject (id, code , libelle)",
        "withcode": "Booléen si true affiche le code de l'objet BlBasicObject en plus du libellé",
        "aucun": "Libellé quand on sélectionne aucun élément (par défaut Tous)",
        "all": "Permet de définir le placeholder comme une valeur possible (typiquement 'Tous' ou 'Aucun')",
        "changeEvent": "Evènement déclenché au changement de valeur",
        "autoSelect": "Sélectionne le premier élement si c'est le seul",
        "selectorClass": "'surcharge du css à appliquer au mat-form-field'"
      },
      "shortcut": {
        "shortCutTitle": "Titre du composant ShortCut affiché en haut du composant.",
        "shortcutList": "Liste de type <strong>{icon:string;text:string;link:string; queryParams?: { [key:string] : string | string[] },categorie:string}[]</strong> qui permet de donner l'ensemble des raccourcis (6 raccourcis maximum).",
        "headerButtons": "Il s'agit d'un ensemble de boutons qui seront affichés dans l'en-tête du composant. Ces boutons seront de type BlAction[].",
        "eventMode": "permet d'activer  mode évènement  lors du click  (par défaut false)",
        "output": {
          "shortCutClicked": "Evènement déclenché lors du click sur un raccourci. (N'oubliez pas de  mettre eventMode à true)"
        }
      },
      "libelle": {
        "description": "Saisie d'un libellé avec contrôle sur le nombre de caractères autorisés (par défaut 200).<p>Consultez le code de l'exemple afin de savoir comment utilisez des messages d'erreurs personnalisées pour vos formControl.</p>",
        "isNumber": "Si le type est nombre afin d'effectuer des traitements d'entrée clavier (par défaut false) ",
        "displaysearch": "Booléen défaut false permet d'afficher la loupe",
        "displayCurrency": "Booléen false par défaut, permet d'afficher la devise courante",
        "read-only": "Booléen false par défaut, permet l'affichage en lecture seule avec style correspondant",
        "uppercase": "Booléen false par défaut, permet l'affichage et la modification du champs en uniquement en majuscule",
        "type": "Type d'input html prise en charge : ( text | password | number )",
        "showLabel": "Booléen défaut true permet de conditionner l'affichage du label ",
        "customErrorsMap": "Map<string,string> le clé correspond au code de la validation et la valeur et le code i18n pour le message d'erreur.",
        "hideRequiredStar": "Pour désactiver l'affichage par défaud de l'astérisque dans le libellé quand le champ est requis"
      },
      "form-error": {
        "customErrorMessage": {
          "date-picker-range": {
            "notTodayDate": "Vérifiez si la date de début est celle d'aujourd'hui .",
            "notTomorrowDate": "Vérifiez si la date de fin est celle de demain."
          },
          "text-field": {
            "maxLengthExceeded": "C'est un message d'erreur personnalisé.",
            "min": "Affichez votre message personnalisé.",
            "odd": "Ce nombre est impaire."
          },
          "date-picker": {
            "dateNow": "Vous devez entrer la date d'aujourd'hui."
          },
          "bl-time": {
            "required": "Ce champs est obligatoire",
            "acceptedValue": "La seule valeur accéptée est '20:11' "
          }
        },
        "input": {
          "formGroup": "Le formGroup du formulaire",
          "displayErrorFields": "Booléen d'affichage des champs d'erreur",
          "baseI18N": "Le prefix i18n pour l'affichage des erreurs. Utiliser le même que dans les placeholder des champs",
          "separator": "Séparateur entre les champs à partir de 3 champs. Par défaut ' , '",
          "and": "Texte afficher comme liaison entre les deux derniers champs énumérés. Par défaut '&'"
        },
        "output": {
          "verifyMultipleFields": "Texte affiché quand plusieurs champs sont à vérifier",
          "verifyTheField": "Texte affiché quand un seul champ est à vérifier",
          "errorMultipleFind": "Texte affiché quand plusieurs erreurs sont détectées",
          "errorFind": "Texte affiché quand une seul erreur est détectée"
        }
      },
      "quick-search": {
        "modalTitle": "Titre du modal",
        "templateMode": "Mode template qui permet de passer un contenu dynamic si c'est true (par défaut false)",
        "customBody": "Contenu du modal si le mode template est activé",
        "callOutBodyComponents": "Liste des composants CallOuts : CallOutObject[] à afficher dans le body du modal",
        "config": "La config du compasant <bl-table> pour l'affichage du list des choix ",
        "autocomplfunc": "Fonction qui permet de mettre à jour la liste auto-complete à chaque entrée.",
        "customAction": "Facultatif. Action personnalisée de type customActionSearch (testLabel: string; icon: IconClassEnum; label: string;)",
        "actionEvent": "Evénement déclenché lors de l'action personnalisée",
        "dialogCancelButton": "Personnaliser  le tooltip , texte , affichage et choix d'icone pour le bouton Annnuler de la modal ouverte ",
        "dialogValidationButton" : "Personnaliser  l'event , le tooltip , texte , affichage et choix d'icone pour le bouton Valider de la modal ouverte  dans le cas ou le mode template est activé sinon un comportement par défaut est appliqué"
      },
      "qsmulti": {
        "config": "La config du compasant <bl-table> pour l'affichage du list des choix ",
        "autocomplfunc": "Fonction qui permet de mettre à jour la liste auto-complete à chaque entrée.",
        "withChipset": "Booléen qui nous permet d'afficher les données dans des chipsets "
      },
      "decimal": {
        "description": "Saisie d'un nombre à virgule avec possibilité de préciser :<ul><li>1. L' autorisation ou pas des nombres négatifs (par défaut false)</li><li>2. Le nombre de décimales souhaité ( par défaut 2 si 0 type entier uniquement)</li><li>3. Le séparateur souhaité (par défaut , et . sont autorisés)</li><li>4. Si l'on souhaite afficher le sigle euro pour indiquer un prix (non affiché par défaut)</li></ul><p>Le formcontrol est de type number</p> <p>L'utilisation des erreurs pérsonnalisées se fait a partir de l'input customErrorMap (à voir le code du sample).</p> ",
        "nbDecimal": "Nombre de décimales souhaitées (0..n) (défaut 2)",
        "isSigleEuro": "si true affiche le logo euro (défaut false)",
        "separator": "Virgule ou Point accepté ( défaut . et , acceptés)",
        "allowNegative": "Booléen (true : négatifs autorisés, false: seulement positif défaut false)",
        "isZeroAllowedAtTheBeginning": "Booléen si true autorise la saisie de 0 au début du champ (par défaut true)",
        "alignToRight": "Booléen si true align la saisie à droite (par défaut false)",
        "completeWithZero": "Booléen si true ajoute des 0 à la fin (par défaut false)",
        "separatorOfThousands": "Booléen si true permet d'ajouter un séparateur de milliers (par défault false)",
        "isPercent": "Booléan si true permet d'afficher le symbole du pourcentage (par défault false)",
        "suffixClassName": "Paramètre qui permet d'afficher l'icone du symbole",
        "suffixLabel": "Paramètre qui permet d'afficher le nom de la devise"
      },
      "notification": {
        "dataSource": "Tableau d'objets de type 'NotificationItem'",
        "count": "Longueur du paginator (par défaut 0)",
        "pageIndex": "L'index de la première page affichée du paginator (par défaut 0)",
        "pageSize": "Nombre d'éléments par page (par défaut 10)",
        "enableConsultation": "Facultatif (false par défaut): booléen rendant les notifications cliquables/consultables lorsque l'attribut 'ref' du modèle de notification est non null / non vide",
        "deleteAll": "L'événement de la suppression de toutes les notifications, facultatif",
        "consultItemEvent": "L'événement au clic sur la ligne ou le bouton de consultation d'une notification si enableConsultation est true",
        "deleteNotification": "L'événement de la suppression d'une notification",
        "readNotification": "Cet événement est déclenché lorsque l'utilisateur marque une notification comme lue",
        "unreadNotification": "Cet événement est déclenché lorsque l'utilisateur marque une notification comme non lue",
        "refresh": "L'événement qui actualise la liste des notifications"

      },
      "notification-modal" :{
        "showDeleteAllButton": "Afficher le bouton de suppression de toutes les notifications.Par défaut 'true'."
      },
      "fab-menu": {
        "input": {
          "fabButtons": "Tableau de boutons flottants (Obligatoire)",
          "icon": "Icon BL (par défaut icone 'add')",
          "direction": "Direction du menu (par défaut 'top')",
          "color": "Couleur du boutons flottant (par défaut 'primary')",
          "tooltipPosition": "position des toolTip par rapport aux boutons (par défaut 'right')",
          "tooltipText": "Text du tooltip du bouton principal (par défaut 'Ajouter')",
          "isActive": "Menu ouvert (par défaut false)",
          "disabled": "Bouton désactivé (par défaut false",
          "closeAterSelection": "ferme le menu après un click sur un bouton (par défaut true)",
          "testLabelValue": " Surcharge pour les tests automatisés (par defaut 'fabmenu')"
        }
      },
      "gauge": {
        "bgRadius": "Rayon du background (par défaut 100)",
        "bgColor": "Couleur du background (par défaut null)",
        "rounded": "Est-ce que les bouts de la jauge sont arrondis (par défaut true)",
        "reverse": "//TODO  (par défaut false)",
        "animationSecs": "Durée de l'animation (par défaut 0.5)",
        "labels": "Les labels. Type GaugeLabel",
        "segments": "Les segments de la jauge ex: le remplissage (par défaut null)"
      },
      "date-picker": {
        "dateFormat": "Format d'affichage de la date, par défaut : DD/MM/YYYY",
        "dateLocale": "Langue d'affichage de la date, par défaut : Français"
      },
      "year-picker": {
        "dateFormat": "Format d'affichage par défaut : YYYY",
        "dateLocale": "Langue d'affichage de la date, par défaut : Français",
        "minYear": "Année minimum sélectionnable dans le year-picker au format année(yyyy)",
        "maxYear": "Année maximum sélectionnable dans le year-picker au format année(yyyy)",
        "defaultYear": "Année par défaut au format année(yyyy)",
        "color": "'primary' | 'accent' | 'warn' | undefined"
      },
      "button": {
        "title": "Obligatoire (par défaut chaine vide) label du bouton ou tooltip",
        "primary": "Factultatif booléen par défaut à false pour indiquer si bouton principal ou non",
        "iconclass": "Facultatif , à renseigner pour avoir une icone. Chaine de caractère ou valeur de l'enum IconClassEnum",
        "circularButton": "Factultatif booléen par défaut à false,  permet d' indiquer si il s'agit d'un bouton en forme de cercle ou normal",
        "iconButton": "Factultatif booléen par défaut à false, permet d'indiquer si il s'agit d'un maticonbutton",
        "disabled": "Factultatif booléen par défaut à false pour désactiver le bouton",
        "size": "Facultatif number définissant la taille de l'icone par défaut 2 qui correspond à ph-1-5x",
        "smallBack": "Appliquer un fond d'icone en petite taille , recommandé pour les icônes en mode fill et avec un size <= 2 ",
        "testLabelValue": "Surcharge pour les tests automatisés la valeur de testLabel"
      },
      "callout": {
        "title": "Facultatif, c'est le titre principal du contenu éditorial Callout.",
        "text": "Facultatif, à renseigner pour avoir le texte du contenu éditorial",
        "calloutClass": "Facultatif, à renseigner une valeur de type enumération (CalloutClassEnum) des 5 valeurs suivantes: (default, information, success, warning, error) pour avoir la bonne mise en forme du contenu éditorial Callout. Si cette propriété n'est pas déclarée, il prend le style par défaut 'default'. ",
        "enablePicto": "Factultatif booléen, par défaut à true, pour indiquer si on veut afficher le pictogramme ou non",
        "paragraphClass": "Spécifiez la classe pour votre callout",
        "customIcon": "Facultatif, icône personnalisée. ",
        "contentMode": "Facultatif, contenu sous forme d'HTML"
      },
      "split-button": {
        "buttonActions": "Tableau de type BlAction qui décrit le bouton principal et les boutons du menu, le premier élément du tableau est par défaut le bouton principal",
        "primary": "Factultatif booléen par défaut à false pour indiquer si bouton principal ou non"
      },
      "icon": {
        "iconClassName": "Obligatoire , à renseigner pour avoir une icone. Chaine de caractère ou valeur de l'enum IconClassEnum",
        "isTitle": "Facultatif, pour appliquer un style de fond remplit à l'icone lié à un titre. ",
        "color": "Facultatif, un code couleur ou une couleur css à appliquer sur le font de l'icon qui est par défaut noir.",
        "align": "L'alignement vertical de l'icone , Par défaut centré au milieu.",
        "tooltip": "Facultatif , le texte à afficher au survole de l'icone",
        "tooltipPosition": "Facultatif , la position du tooltip par rapport à l'icone de type BlTooltipPosition {ABOVE | BELOW | BEFORE | AFTER} "
      },
      "verticalmenu": {
        "listAction": "Array de type BlAction qui décrit un élément du menu (on utilise uniquement le label, l'eventEmitter et éventuellement l'icone et le confirmMessage du modèle BlAction)",
        "hidden": "facultatif par défaut à false. Si true, n'affiche pas le bouton circulaire avec les 3 petits points verticaux",
        "data": "facultatif , array de données du type que vous souhaiter passer"
      },
      "textArea": {
        "maxLength": "La valeur maximale à saisir en tant que chaîne de caractères (par défaut:555)",
        "matHintStart": "Hint à gauche de blTextArea",
        "matHintEnd": "Hint à la droite  de blTextArea",
        "calculateMaxLength": "Activer le compteur des chaînes de caractères en tant que matHintEnd ",
        "widthTextArea": "Définir un width spécifique au composant",
        "appearance": "Paramètre de type MatFormFieldAppearance permettant de modifier l'aspect du composant ('legacy' | 'standard' | 'fill' | 'outline')",
        "readOnly": "Booléen , permet l'affichage en lecture seule avec style correspondant (false par défaut)",
        "customErrorsMap": " le rôle de customErrorsMap est de fournir une correspondance personnalisée pour les erreurs de validation du formulaire.",
        "validationErrorsMap": "la validationErrorsMap est utilisée pour stocker les correspondances entre les clés d'erreurs de validation et les messages d'erreur associés. Cette carte est utilisée ultérieurement lors de la création des objets ErrorModel. la validationErrorsMap est remplie à partir de la customErrorsMap (si elle est définie) et peut également être remplie manuellement avec des correspondances personnalisées entre les clés d'erreurs de validation et les messages d'erreur",
        "heightTextArea": "Définir une hauteur spécifique au composant"
      },
      "transversemenu": {
        "listAction": "Array de type BlMenuAction qui décrit un élément du menu (on utilise uniquement l'idAction et le label qui sont obligatoire, et un subMenu si on veut faire un sous-menu du modèle BlMenuAction).",
        "hidden": "facultatif par défaut à false. Si true, n'affiche pas le bouton du menu transverse.",
        "title": "Facultatif, si on veut modifier le titre du bouton menu transverse.",
        "iconClass": "Facultatif, si on veut ajouter une îcone à gauche du bouton menu transverse.",
        "data": "facultatif , array de données du type que vous souhaiter passer"
      },
      "datatable": {
        "config": "Obligatoire, BlTableConfig, configuration de la table",
        "isLoading": "Facultatif, boolean, permet d'indiquer si la liste est en train de charger (affichage du spinner, false par défaut)",
        "allViewCheckedEvent": "EventEmitter, évènement déclenché après le AfterViewChecked",
        "filterComponentsConfig": "BlComponentConfig[] qui decrit la liste des filtres appliquer et l'ordre d'affichage",
        "initialFilter": "Valeur initial du filter",
        "filterGroup": "FormGroup qui encapsule les champs des filters",
        "compareObject": "Fonction (a: any, b: any) => boolean qui permet de determiner si deux elemets sont égaux",
        "i18nFilerResetButton": "Code I18n utiliser pour le button initialiser",
        "i18nFilerSearchButton": "Code i18N utiliser pour le button rechercher",
        "i18nFilterHeader": "code i18n à utiliser pour afficher le popup des filter",
        "verticalLayout": "boolean si true les filter seront affichés à droite si non en top de la table",
        "tableInMatCard": "Afficher le tableau dans une carte  (par défaut true)",
        "tableTitle": "Afficher un titre au-dessus de la table",
        "titleClass": "Définissez une classe à votre titre.",
        "moreMargin": "Booléen : si vrai, un espacement est appliqué à la carte de la table BL (à utiliser, par exemple, dans le cas d'un stepper)",
        "up": "Voir moins",
        "down": "voir plus",
        "pageIndex": "Number: Permet à l'utilisateur de fixer l'index du paginator.",
        "searchInitInput": "Impact Visuel - Permet de donner une valeur à la recherche au NgOnInit",
        "noDataMessage": "Message à afficher si la liste est vide",
        "showCellsToolTip": "Afficher Tooltip des cellules (par défaut false)",
        "useTruncate": "Utiliser la troncation dans les titres de colonnes de la table (par défaut false)"
      },
      "filter": {
        "nbFiltersPerLine": "Nombre maximum de filtres à afficher sur une ligne avant de faire un retour à la ligne, par défaut, les filtres prennent la taille disponible avant de faire un retour à la ligne (auto-fill).",
        "displaySearchButton": "Afficher ou masquer le bouton de recherche, par défaut le bouton est affiché.",
        "displayResetButton": "Afficher ou masquer le bouton de réinitialisation, par défaut le bouton n'est pas affiché.",
        "searchEvent": "Evènement déclenché au clic sur le bouton de recherche.",
        "resetEvent": "Evènement déclenché au clic sur le bouton réinitialiser."
      },
      "tree": {
        "description": "Composant d'affichage d'une arborescence.",
        "treeData": "Tableau d'éléments de type TreeModel : { key : any, name: string, displayAction: boolean, limitedAcess: { idAction: string, disabled: boolean}, children: TreeModel[]}}. Permet de décrire un noeud avec une clé, un label , les éléments enfants du noeud. Pour chaque élément, on peut définir si on souhaite afficher les actions, et la confidentialité sur l'action via limitedAccess. Les actions sont personnalisables.",
        "actions": "Tableau de type BlAction (modèle utilisé pour la Bl-table) qui permet de décrire le bouton d'action avec l'évent associé",
        "allExpendable": "Parametre boolean permettant l'ouverture de plusieurs node avec des chemins différent "
      },
      "dialog": {
        "description": "Ce composant permet d'afficher une boite de dialogue<br><br>Afin de l'implémenter, il faut importer BlDialogModule.<br>Des configurations génériques sont disponibles, entre autres celle de sauvegarde (openSaveDialog), de suppression (openDeleteDialog), de succès (openSuccessDialog), d'erreur (openErrorDialog), et de problème (openTechnicalErrorDialog).<br>Toutes les fonctions génériques <u>doivent</u> recevoir en paramètre un contenu textuel principal (title).<br>Les méthodes 'openSuccessDialog', 'openErrorDialog', 'openTechnicalErrorDialog' <u>peuvent</u> recevoir en paramètre un contenu textuel secondaire (text).<br>Toutes les fonctions génériques <u>peuvent</u> recevoir en paramètre jusqu'à quatre events correspondants aux différents boutons de la Dialog (yesEvent/noEvent/cancelEvent/closeEvent).<br><br>Quand le paramètre <b>waitDialogConfig</b> est renseigné, la Dialog est affichée avec un spinner et un message de chargement. Il faut appeler la méthode <b>closeDialog()</b> sur BlDialogService pour fermer la Dialog d'attente.<br><br><strong>La méthode openCustomDialog n'est pas recommandée.</strong> Elle peut être utilisée dans un cas métier ciblé.",
        "input": {
          "data": "Obligatoire. C'est la donnée qui transit dans la Dialog.",
          "title": "Obligatoire. C'est l'élément textuel pricipal de la Dialog.",
          "text": "Facultatif. C'est l'élément textuel secondaire de la Dialog.",
          "yesEvent": "Facultatif. EventEmitter du bouton 'yes'.",
          "noEvent": "Facultatif. EventEmitter du bouton 'no'.",
          "cancelEvent": "Facultatif. EventEmitter du bouton 'cancel'.",
          "closeEvent": "Facultatif. EventEmitter du bouton 'close'.",
          "getDialogCustomConfig": "Inputs accéssible uniquement via la méthode openCustomDialog (non recommandé)",
          "iconClass": "Facultatif. C'est l'IconClassEnum de la Dialog.",
          "iconColor": "Facultatif. C'est l'attribut qui gère la couleur de l'iconClass de la Dialog.",
          "iconAddCircle": "Facultatif. C'est l'élément qui permet d'ajouter un cercle autour de l'iconClass de la Dialog.",
          "yesButtonTxt": "Obligatoire. Le bouton 'yes' de la Dialog, Ce paramètre accepte comme entrée soit un string représentant le titre du bouton, soit un objet avec les propriétés 'titleButton' et 'icon'.",
          "noButtonTxt": "Facultatif. le bouton 'no' de la Dialog, Ce paramètre accepte comme entrée soit un string représentant le titre du bouton, soit un objet avec les propriétés 'titleButton' et 'icon'.",
          "cancelButtonTxt": "Facultatif. le bouton 'cancel' de la Dialog. Ce paramètre accepte comme entrée soit un string représentant le titre du bouton, soit un objet avec les propriétés 'titleButton' et 'icon'.",
          "closeButtonTxt": "Obligatoire. le bouton 'close' de la Dialog. Ce paramètre accepte comme entrée soit un string représentant le titre du bouton, soit un objet avec les propriétés 'titleButton' et 'icon'.",
          "testLabel": "Facultatif. C'est le testLabel de la Dialog. (par default à 'testLabel')",
          "isButtonWithIcon": "Facultatif. Un boolean pour afficher des boutons avec des icones.",
          "waitDialogConfig": "Facultatif. De type WaitDialogConfigModel, permet d'afficher une fenêtre d'attente, pour masquer la fenêtre d'attente après le traitement il faut appeler BlDialogService.closeDialog(). Les paramètres sont : title (titre le la fenêtre), message (texte de la fenêtre), timeoutBlockerMs (temps d'attente avant l'affichage de la fenêtre d'attente en ms), linkMessage (texte du lien), linkUrl (url du lien)"
        }
      },
      "generic-dialog": {
        "description": "<p>Affiche une boîte de dialogue générique avec un contenu personnalisé.</p><p>Afin d'utiliser ce composant, il faut importer BlDialogModule. La méthode 'openGenericDialog' de BlDialogService reçoit en paramètres la boîte de dialogue à afficher et un objet contenant les paramètres de la boîte de dialogue.</p>",
        "title2": "Créer une boîte de dialogue métier",
        "desc2": "<p>Pour créer une boîte de dialogue métier, il faut insérer le contenu souhaité dans le composant bl-generic-dialog. Pour cela, il suffit d'ajouter l'attribut bl-generic-dialog__content dans la balise encapsulant notre contenu.</p> <p>Pour les traitements bloquants on peut demander via l'objet WaitDialogModel à ce qu'une dialogue d'attente s'affiche.<br> Une fois le traitement terminé, il faut appeler la méthode closeGenericDialog() du service BlDialogService pour fermer la boîte de dialogue.</p>",
        "input": {
          "openGenericDialogParams": "Paramètres de la méthode openGenericDialog du service BlDialogService",
          "blGenericDialogComponent": "Obligatoire. Le composant englobant le contenu à injecter dans la boîte de dialogue générique.",
          "blGenericDialogConfig": "Facultatif. La configuration de la boîte de dialogue générique. C'est un objet de type BlGenericDialogConfig avec les attributs suivants: data(données transmises à la dialogue si nécéssaire), title, isButtonWithIcon, yesButtonTxt, noButtonTxt, cancelButtonTxt, closeButtonTxt, testLabel, waitDialogConfig(de type WaitDialogConfigModel, permet de configurer la modale d'attente).",
          "blGenericDialogSizeConfig": "Facultatif. La configuration de la taille de la boîte de dialogue générique. C'est un objet de type BlGenericDialogSizeConfig avec les attributs suivants: minWidth, maxWidthForDesktop, maxWidthForTablet, maxWidthForMobile.",
          "blGenericDialogEvent": "Facultatif. ",
          "genericDialogParams": "Paramètres du composant bl-generic-dialog",
          "validation": "Facultatif. La fonction qui valide les composants de la dialogues (par exemple un formulaire), la fonction doit retourner un booléen."
        },
        "output": {
          "serviceDialogOutputs": "Retour de la méthode openGenericDialog du service BlDialogService",
          "closeEvent": "L'évenement de retour de la dialog. Permet de retourner l'état du traitement long.",
          "genericDialogOutputs": "Evènements de bl-generic-dialog émis lors des clics sur les trois boutons d'action prédéfinis de la boîte de dialogue générique",
          "yesEvent": "L'évènement déclenché lorsque le bouton principal est cliqué.",
          "noEvent": "L'évènement déclenché lorsque le bouton secondaire est cliqué.",
          "cancelEvent": "L'évènement déclenché lorsque le bouton tertiaire est cliqué."
        }
      },
      "select": {
        "options": "Le tableau des Options à afficher dans la liste déroulante, un Option est composé d'un label, une valeur et un boolean isHidden pour indiquer s'il doit être masqué(La valeur par défaut est null)",
        "optionGroups": "Le tableau des OptionGroups à afficher dans la liste déroulante, un OptionGroup est composé d'un label, une liste d'Options et un boolean isHidden pour indiquer si le groupe doit être masqué(La valeur par défaut est null)",
        "hideTooltipOptions": "Permet d'afficher une tooltip sur les éléments de la liste (La valeur par défaut est true)",
        "styleCss": "Permet d'appliquer le syle css sur le composant"
      },
      "attachment": {
        "input": {
          "bl-attachment": {
            "accept": "Formats de fichiers acceptés. Par défaut 'null'",
            "required": "Fichier requis. Par défaut 'false'",
            "disabled": "Choix de fichier désactivé. Par défaut 'false'",
            "convertSizeFunc": "Fonction qui convertie la taille (octets) en chaine avec l'unité : (s: number) => string, si aucune fonction n'est définie, une convertion en Ko est réalisée.",
            "placeholder": "Le placeholder de l'input"
          },
          "bl-attachment-chooser": {
            "for": "Référence vers le bl-attachment",
            "removable": "Fichier supprimable.'false' par défaut",
            "hidden": "Icône de choix de fichier cachée.'false' par défaut",
            "disabled": "Clic sur l'icône 'file chooser' désactivé.'false' par défaut"
          }
        },
        "output": {
          "bl-attachment": {
            "value": "La valeur du fichier de type File (fichier séléctionné depuis le navigateur), FileInfo ou String"
          }
        }
      },
      "multi-attachment": {
        "input": {
          "accept": "Formats de fichiers acceptés. Par défaut 'null'",
          "required": "Fichier(s) requis. Par défaut 'false'",
          "disabled": "Choix de fichiers désactivé. 'false' par défaut",
          "removable": "Fichiers supprimables.'true' par défaut",
          "nbFilesAllowed": "Le nombre de fichiers autorisés",
          "maxSize": "La taille maximum autorisée pour chaque fichier , en Ko",
          "readOnlyFile": "Mettre le champs pièce jointe multiple en lecture seul",
          "ngSubmit": "La fonction contenant le traitement de validation",
          "convertSizeFunc": "Fonction qui convertie la taille (octets) en chaine avec l'unité : (s: number) => string, si aucune fonction n'est définie, une convertion en Ko est réalisée",
          "openFileFunc": "Fonction déclenché lors de l'ouverture d'un document",
          "hideExtentions": "Mettre à 'true' si on ne veux pas afficher les extensions dans l'input. par défaut 'false'.",
          "costumMsgErrors": "Mettre à 'true' si on veux désactiver les messages d'eereurs par défaut pour les personnalisés."
        },
        "output": {
          "value": "La liste les fichiers séléctionnées de type FileInfo ou File ou null "
        }
      },
      "time": {
        "input": {
          "validChars": "Regex pour les caractères valides par défault ( /[0-9]/ )",
          "validSeparators": "Regex pour les séparateurs valides par défault ( /[:]/ ) ",
          "timeRegex": "Regex pour le format de la date par défault ( /^(0[0-9]|1[0-9]|2[0-3]|[0-9])[: ]?[0-5][0-9]$/ )",
          "required": "Date obligatoire par défault ( false )",
          "label": "Label affiché en fixe par défault ( null )",
          "testLabelValue": "testlabel de l'input par défault ''''",
          "placeholder": "Placeholder affiché quand le champ prend le focus, par défault ( null )"
        },
        "output": {
          "label": "Label affiché en fixe par défault ( null )",
          "testLabelValue": "testlabel de l'input par défault ''''"
        },
        "error": {
          "pattern": "Format incorrect"
        }
      },
      "horizontal-gauge": {
        "min": "La valeur minimum de la jauge (par défaut 0)",
        "max": "La valeur maximum de la jauge (par défaut 100)",
        "value": "La valeur de la jauge (par défaut null)",
        "left": "Texte de gauche",
        "right": "Texte de droite",
        "styleCss": "Permet d'appliquer le syle css sur le composant",
        "testLabelValue": "Surcharge pour les tests automatisés la valeur de testLabel"
      },
      "snackbar": {
        "accessibilityParam": "un paramètre permet de laisser le snackbar affiché à l'écran jusqu'à l'utilisateur clique sur le bouton «X» pour fermer le snackbar."
      },
      "sticky-header": {
        "alt-image": "Exemple de l'implémentation du composant bl-sticky-header",
        "spaceBetween": "permet d'ajuster l'espace entre l'en-tête fixe (sticky header) et le composant situé en dessous du sticky header, en permettant son élargissement ou sa réduction.",
        "styleCss": "Pour personnaliser le composant sticky-header."
      },
      "card": {
        "description": "<p>Une carte permet d'afficher un contenu dans un panneau. Une carte peut contenir une entête, un body, des actions et un footer.</p><p> Deux cas d'utilisations sont possibles : </p><ol><li>1.Déclarer un simple '<'bl-card'>' contenant les infos souhaitées en inputs</li><li>2.Déclarer un '<'bl-card'>' et déclarer son '<'bl-card-header'>' et '<'bl-card-body'>' et un '<'bl-card-actions'>' et un '<'bl-card-footer'>'.</li>",
        "input": {
          "title": "Titre de la carte",
          "subTitle": "Sous titre de la carte",
          "avatarImg": "Image à spécifier dans l'avatar de la carte , url optionel",
          "body": "Contenue du body",
          "cardStyle": "Style css à appliqué, optionel",
          "cardTitleStyle": "Style css à appliqué sur le titre de la carte. Optionel",
          "imgBody": "Image à appliqué dans le body , optionel",
          "footerDivider": "Afficher ou non un diviseur entre le body et le footer, par défaut 'true'",
          "cardActions": "Actions de la carte de type BlAction[]",
          "footer": "Footer de la carte",
          "showCloseBtn": "Activer le bouton de fermeture de carte, par défaut 'false'"
        },
        "output": {
          "onCloseCard": "Fontion à déclanché lors de la fermeture de la carte"
        },
        "header": {
          "input": {
            "applyPaddingBottom": "ajouter du padding en bas du header",
            "title": "Partie réservé au Titre de la carte",
            "cardTitleStyle": "Style du titre de l'entête de carte, optionel.",
            "subTitle": "Partie réservé au sous-Titre de la carte, optionel",
            "avatarImg": "Partie réservé à l'image de l'avatar, optionel",
            "style": "Classes de styles à appliquer sur l'entête de la carte , optionel",
            "showCloseBtn": "Activer le bouton de fermeture de carte, par défaut 'false'",
            "customLink": "Lien cutomisé de type ConfigLink. Optionel",
            "headerDevider": "Ajoute un devider sous l'entête, par défaut 'true'"
          },
          "output": {
            "onClose": "Fontion à déclanché lors de la fermeture de la carte"
          }
        },
        "body": {
          "input": {
            "style": "Classe de Style à appliquer sur le corps de la carte"
          }
        },
        "actions": {
          "input": {
            "cardActions": "Liste des actions de type BlAction[] , optionnel. On peux implémenter son propre code si besoin.",
            "class": "Class de style à appliquer sur la partie actions de carte."
          }
        },
        "footer": {
          "useExpention": "Utiliser un footer expansible. boolean , par défaud 'false'. en cours de maintenance",
          "footerDevider": "Afficher le trait du divider du footer. boolean , par défaud 'true'.",
          "withExpension": "Activer un footer expansible. boolean , par défaud 'false'. en cours de maintenance"
        }
      },
      "bl-expension-panel": {
        "description": "Cette page présente le composant \"Expension panel\". Cet accordéon peut être intégré dans le footer d'une carte : bl-card > bl-card-footer.",
        "libelle": "Libellé du panneau",
        "content": "Type your name and age",
        "simple-sample": "Composant expension panel :",
        "sample-custom-header": "Composant expension panel avec un header costumisé :",
        "sample-under-card": "Expension panel sous une carte :",
        "sample-inside-card": "Expension panel dans une carte : ",
        "input": {
          "title": "Pour spécifier le titre du card.",
          "expension-title": "Titre de l'expension panel, valeur par défaut ( ' ' ).",
          "expension-description": "Description du expension panel, valeur par défaut ( ' ' ).",
          "titleSytle": "Style css à appliqué sur le titre de l'expension panel.",
          "expentionIcon": "Icone affichée au début de l'expension panel de type IconClassEnum. Facultatif.",
          "iconHeader": "Icon à afficher à la fin de la partie header de l'expension panelde type IconInfos. Facultatif.",
          "titleIcon": "Icon à afficher à la fin du titre de l'expension panel de type IconInfos. Facultatif."
        },
        "bl-expension-panel-header": {
          "input": {
            "title": "Titre de l'entête de l'expension panel",
            "description": "Description de l'entête de l'expension panel",
            "iconStart": "Icon à afficher au début de l'entête de l'expension panel de type IconInfos. Facultatif.",
            "iconEnd": "Icon à afficher à la fin de l'entête de l'expension panel de type IconInfos. Facultatif.",
            "titleSytle": "Style css à appliqué sur le titre de l'entête de l'expension panel."
          }
        }
      },
      "stock-headband": {
        "description": "Le bandeau d'actions est une barre qui est toujours positionnée en bas de l'écran. Elle permet d'afficher des actions contextuelles (propre à l'écran en cours). Cette barre peut être fixe, c'est-à-dire avoir toujours la même position au scroll, ou être positionnée à la fin de la page (visible uniquement si l'utilisateur scroll).",
        "input": {
          "buttonsActions": "Tableau de type BlAction qui décrit le bouton principal et les boutons du menu, le premier élément du tableau est par défaut le bouton principal",
          "componentType": "Variable qui permet d'indiquer le type du composant",
          "listAction": "Array de type BlMenuAction qui décrit un élément du menu (on utilise uniquement l'idAction et le label qui sont obligatoire, et un subMenu si on veut faire un sous-menu du modèle BlMenuAction).",
          "primary": "Factultatif booléen par défaut à false pour indiquer si bouton principal ou non",
          "title": "Obligatoire (par défaut chaine vide) label du bouton ou tooltip",
          "testLabelValue": "Surcharge pour les tests automatisés la valeur de testLabel"
        }
      },
      "forms-template": {
        "panelTitles": "Liste des titres des accordions"
      },
      "page-template": {
        "usage": "Utilisation",
        "input": {
          "pageIcon": "Icone du titre de la page : Optionnel",
          "pageTitle": "Titre figurant en haut de la page",
          "formGroup": "Un formulaire de page de type FormGroup : Optionel",
          "onClosePage": "La fonction qui sera déclanché au clique sur le bouton fermeture de page : Optionel, le comportement par défaut est le retours vers la page précédente."
        },
        "output": {
          "formGroup": "Le formGroup du formulaire de la page si il est alimenté en entrée"
        }
      },
      "radio": {
        "description": "Le composant bouton radio permet de sélectionner une et une seule valeur seulement dans une liste d'éléments.",
        "required": "Requis (par défaut : false)",
        "readonly": "En lecture seule (par défaut false)",
        "disabled": "Déactiver la radio button (par défaut false)",
        "isNonSelected": "Si aucune valeur n'est sélectionnée (par défaut false)",
        "isObligatory": "Si le champ est obligatoire (par défaut true)",
        "isVertical": "le button radio avec une liste des valeurs présenté verticalement (par défaut true)",
        "value": "valeur du radio button",
        "label": "Label du group Radio button",
        "formControl": "formControl du radio button",
        "testLabel": "testLabel du radio button (par défaut '')",
        "notRequiredAsterix": "L'affichage optionnel de l'astérisque dans le cas obligatoire "
      },
      "workflow": {
        "input": {
          "config": "Obligatoire, BlWorkflowObject, configuration de la stepper"
        }
      },
      "popup-card": {
        "input": {
          "popupTitle": "Titre de la popup",
          "headerLink": "Lien en haut à droite du header de la popup, de type : ConfigLink",
          "visible": "Variable de type BehaviorSubject<boolean> : la mettre à 'true' , quand on veux ouvrire la popup , et à 'false' à la fermeture.L'état par défaut est en mode fermé.",
          "popupStyle": "Style globale de la popup en css."
        },
        "output": {}
      },
      "task": {
        "input": {
          "task": "Object de type Task",
          "isSubTask": "Boolean, pour traiter une sous-tâche",
          "displayPlusButton": "Boolean, pour afficher ou cacher le bouton +, par défault false",
          "plusButtonToolTip": "La valeur de l'info-bulle du bouton",
          "displayUpdateButton": "Boolean, pour afficher ou cacher le bouton 'pencil' pour la modification, par défault false",
          "updateButtonToolTip": "La valeur de l'info-bulle du bouton",
          "actionsList": "Une liste des actions à injecter dans le composant, ex : Action supprimer, dupliquer ...etc",
          "isActionsListVisible": "Pour afficher ou cacher la liste des actions, par défaut true",
          "iconImagePath": "Le chemin de l'image à afficher",
          "iconImageStyle": "Le style de l'image à afficher",
          "ActivateHoverCard": "les boutons Modifier,Ajouter ,Terminer ne seront affichés que lorsque la carte est survolée,c'est false par défaut",
          "noBorder": "Booleen, pour afficher ou non les bordures (pour fonds foncés), false par défaut",
          "displayAssignedTo": "Pour voir à qui la tâche est assignée",
          "withShadow": "Pour afficher l'ombre de la tâche"
        },
        "output": {
          "plusButtonEvent": "Déclencher un event au click sur le bouton +",
          "updateButtonEvent": "Déclencher un event au click sur le bouton update (pencil)"
        }
      },
      "tab-group": {
        "tabsNumber": "Par défaut '1'. Le nombre d'onglets que vous souhaitez avoir : obligatoire",
        "title": "Titre de l'onglet courant.",
        "actionsList": "La liste des boutons métier, de type BlAction.",
        "selectedTabChange": "Renvoie l'index de l'onglet sélectionné.",
        "selectedIndex": "Pour afficher l'onglet via l'index.",
        "disableAnimation": "Pour désactiver l'animation des onglets, par défaut 'false'.",
        "testLabelValue": "Surcharge pour les tests automatisés la valeur de testLabel de l'onglet."
      },
      "chips": {
        "input": {
          "teslabelValue": "Valeur de test",
          "tooltip": "La valeur de l'infobulle du chip",
          "chipValue": "La valeur affiché du chip",
          "canBeDeleted": "Booléan qui permet d'afficher le chip avec croix , par défaut à true",
          "chipColor": "Variable qui permet de changer la couleur du chip",
          "chipStyle": "Variable qui permet d'appliquer un style css sur la chip",
          "matChipRemoveLabel": "Le label qui decrit le button supprimer d'une chip",
          "clickable": "Booléan qui permet de rendre le chip clickable ou pas , par défaut à false"
        }
      },
      "image-picker": {
        "description": "Le sélecteur d'image est un composant permettant de sélectionner une image dans une liste donnée. Il peut être utilisé pour la personnalisation par l'utilisateur.<br>Les images sont à fournir par le projet.<br>Le composant doit être inclus dans une boîte de dialogue générique (cf exemple d'implémentation métier ci-dessous, la dialogue s'ouvre au clic sur l'image à modifier)",
        "select-an-image-btn": "Sélectionner une image",
        "dialog-title": "Image d'ambiance",
        "dialog-sub-title": "Choisissez votre image",
        "input": {
          "imagesList": "Tableaux de données de type BLImageModel: {title:string (title image); src:string (chemin source de l'image); description: string (optionnel : description de l'image pour améliorer l'accessibilité)}",
          "selectedImage": "Image actuellement sélectionnée"
        },
        "output": {
          "selectImage": "Evénement déclenché à la sélection d'une image"
        }
      }
    }
  },
  "sample": {
    "text-field": {
      "title": "Types différents",
      "onBlur-title": "Exemple avec l'implémentation de l'event (onBlurAction) :",
      "onBlur-desc": "Dans cet exemple le text du champ change de couleur une fois la méthode (blur) est déclanché ."
    },
    "task": {
      "showBusinessImplementation": "Afficher les déclinaisons métier",
      "delayedTaskTitle": "Exemple de tache dépassée",
      "TaskWithIncon": "Exemple de tache avec Icone",
      "notDelayedTaskTitle": "Exemple d'une prochaine tâche",
      "taskWithStatusTitle": "Exemple d'une tâche avec statut",
      "taskWithCustomDateMax": "Exemple d'une tâche avec écheance personnalisée",
      "taskWithStatusNoBorder": "Exemple d'une tâche sans bordure",
      "delayedTaskNoBorder": "Exemple d'une tâche dépassée sans bordure",
      "taskWithShadow": "Exemple de tâche avec ombre",
      "plusButtonToolTipValue": "Ajouter une sous-tâche",
      "checkSquarButtonToolTipValue": "Terminer une tache ou sous-tâche en cliquant sur le bouton check-square",
      "UpdateButtonToolTipValue": "Modifier",
      "TaskWithButtonCheckSquare": "Terminer une tache ou sous-tâche en cliquant sur le bouton check-square",
      "TaskWithInitials": "Une tâche assignée"
    },
    "icon-picker": {
      "first-example": "Ce premier exemple nous démontre l'utilisation du composant en version globale. Tous les composants provenant de la bibliothèque bl-element et s'appuyant principalement sur phosphoIcons sont affichés, avec la possibilité de  rechercher.",
      "second-example": "Le deuxième exemple démontre l'utilisation du bl-icon-picker en personnalisant les icônes à afficher."
    },
    "color-picker": {
      "exemple1": "Sélecteur de couleur par roue chromatique : ",
      "exemple2": "Sélecteur de couleurs prédéfinies :",
      "exemple3": "Définir une couleur par défaut:",
      "exemple4": "Définir les couleurs des cercles :",
      "exemple4.desc": "Via l'input : ",
      "methode1": "Méthode orientée model:",
      "methode1.desc": "Cette méthode consiste à définir la couleur dans la déclaration du",
      "methode2": "Méthode orienté template:",
      "methode2.desc": "Cette méthode consiste à définir la couleur dans l'input"
    },
    "tree": {
      "title": "Affichage standard d'un arbre.",
      "expandOne": "Affichage avec ouverture d'un seul chemin dans l'arbre."
    },
    "multi-attachment": {
      "samples": "Exemples",
      "doc": {
        "title1": "Pièce jointe Multiples",
        "required": "- Le champs est obligatoire :",
        "required-extentions": "- Les extensions requises dans l'exemple sont :",
        "maxSize": "- La taille maximal d'un fichier est précisé en input à  1500 ko :",
        "maxFilesNum": "- Le nombre de fichiers autorisés est 4 dans cet exemple :",
        "sizeFunc": "- La fonction de convertion de la taille du fichier convertie la taille en Mo :",
        "title2": "Avec personnalisation des message d'erreurs",
        "costumMsgErrors": "- Désactiver les messages d'erreurs par défaut avec le paramètre suivant :",
        "title3": "Pièce jointe en ReadOnly",
        "readonly": "- pour activer le mode lecture seul :"
      },
      "required-error": "Veuillez choisir les fichiers requis",
      "invalid-extentions": "Extension(s) invalide(s)",
      "nbFilesExceeded": "Veuillez ne pas dépasser 2 fichiers"
    },
    "autocomplete": {
      "withAction": "Avec une action customisé",
      "eventMsg": "Action déclanché pour l'option : ",
      "actionLabel": "Action Customisé",
      "withPagination": "Affichage dynamique de l'autocomplete",
      "withoutPagination": "Affichage static de l'autocomplete",
      "listSize": "Nombre d'élement retourn par l'autocomplete",
      "simulation": "Simulatation de l'autocomplete pour des grandes listes",
      "enablePagination": "Affichage dynamiquer la liste des choix de l'autocomplete page par page",
      "pageSize": "Le nombre d'élement par page par defaut  50",
      "hintStart": "Hint à afficher en dessous aligné au début de l'input ",
      "hintEnd": "Hint à afficher en dessous aligné en fin de l'input ",
      "autoCompleteAction": "Action customisé facultatif à ajouter en fin de la liste . type customAction ",
      "autoCompleteActionEvent": "Fonction à déclanché au click sur l'action customisé.",
      "hint": {
        "start": "List de status",
        "end": "1/10"
      }
    },
    "code": {
      "with": "Avec code",
      "without": "Sans code"
    },
    "decimal": {
      "rate.placeholder": "Taux à 5 décimales",
      "rate": "Taux",
      "price": "Prix",
      "price.placeholder": "Nombre positif à 2 décimales"
    },
    "integer": {
      "phoneNumber.placeholder": {
        "withoutZeroAtTheBeginning": "Entier",
        "withZeroAtTheBeginning": "Entier avec 0 au début",
        "customExample": "Entier plus grand que 29"
      },
      "integerWithZero": "Entier avec 0 au début",
      "biggerNumber": "Entier plus grand que 29 ",
      "integerWithoutZero": "Entier"
    },
    "status.list": {
      "all": "Tous les statuts",
      "none": "Aucun statut",
      "empty": "Aucun élément renseigné",
      "title": "Status",
      "saisie": "Saisie Un Statuts"
    },
    "fraction": {
      "description": "Saisie d'une fraction au format (numérateur/dénominateur)<br>Exemple : 10/50, 1/4<br><br>Le formcontrol est de type <b>FractionModel</b><br><br>export interface FractionModel {<br>&nbsp;&nbsp;numerator: string | null;<br>&nbsp;&nbsp;denominator: string | null;<br>}",
      "label": "Fraction",
      "placeholder": "10/100"
    },
    "libelle": {
      "label": "length du message ne dépasse pas 4 caractères ",
      "label1": "Libelle 1",
      "label2": "Libelle 2",
      "label3": "Libelle 3",
      "label4": "Libelle 4",
      "label5": "Libelle 5",
      "label6": "Libelle 6",
      "label7": "Libelle 7",
      "label8": "Libelle 8",
      "label9": "Libelle 9",
      "placeholder": "15 caractères autorisés",
      "search": "Rechercher ...",
      "read-only": "Lecture seule",
      "empty": "Liste vide",
      "uppercase": "Uniquement en majuscule",
      "password": "Mot de passe",
      "number": "Nombre",
      "erreurs": "Gestion des erreurs multiples: Saisissez 'a' et 'c'",
      "disabled": "Liste avec les valeurs paires disabled",
      "counter": "Avec compteur de caractères"
    },
    "transverse": {
      "default": "Par défaut",
      "withTitle": "Avec un titre spécifié",
      "withIcon": "Avec une îcone à gauche spécifiée",
      "withMatcard": "Exemple du transverse menu utilisé dans une mat-card",
      "changeInAllCards": "Les boutons d'activation et de désactivation du  menu transverse s'appliquent à toute la liste ci-dessous",
      "changeInTouchedCard": "Pour la liste ci-dessous, les boutons d'activation et de désactivation du  menu transverse s'appliquent seulement à la card cliquée"
    },
    "vertical": {
      "default": "Par défaut",
      "smallIcon": "Avec une taille plus petite",
      "withMatcard": "Exemple du vertical menu utilisé dans une mat-card",
      "changeInAllCards": "Les boutons d'activation et de désactivation du vertical menu s'appliquent à toute la liste ci-dessous",
      "changeInTouchedCard": "Pour la liste ci-dessous, les boutons d'activation et de désactivation du vertical menu s'appliquent seulement à la card cliquée",
      "matcardContent": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
      "matcardState": "Urgent"
    },
    "calendar": {
      "simple": "Calendrier à choix Simple",
      "multiple": "Calendrier à choix multiple",
      "range": "Calendrier avec plage"
    },
    "periode": {
      "label": "Période",
      "placeholder": "yyyy.mm"
    },
    "button": {
      "select": "Selectionner",
      "back": "Retour",
      "action": "Action",
      "validate": "Valider",
      "rollback": "Annuler",
      "delete": "Supprimer",
      "save": "Enregistrer",
      "save-for-later": "Enregistrer et reprendre plus tard",
      "next": "Suivant",
      "previous": "Précédent",
      "demo.size.title": "Prise en compte de la taille des icones :",
      "demo.color.title": "Prise en compte de la couleur des icones :",
      "demo.className.title": "Trois façons d'initialiser la valeur de iconClassName :",
      "demo.button.recommendation.title": "Gestion du responsive",
      "demo.button.recommendation.tense1": "Les boutons ne changent pas de taille, ils se repositionnent. Le positionnement est à définir par le projet.",
      "demo.button.recommendation.tense2": "Recommandation : Les boutons passent les uns au-dessous des autres à mesure que la résolution rétrécit.",
      "demo.button.recommendation.tense3": "Veillez à ce qu’on arrive toujours à voir l’ensemble des boutons dans le footer quand on scroll sur la page, et qu’il n’y en ait pas certains qui se cachent.",
      "demo.button.recommendation.tense4": "Le projet peut tout aussi décider de supprimer un bouton par manque d’espace si ce bouton se trouve être facultatif.",
      "close": "Fermer",
      "openCard": "Ouvrir la carte de navigation",
      "openExemple": " Voir l'exemple",
      "reset": "Terminer",
      "custom": "Bouton métier",
      "demo.smallBack.title": "Appliquer un fond avec une taille petite en activant l'input <code>[smallBack]='true'</code> sur les boutons icônes:"
    },
    "callout": {
      "demo.customIcon": "Exemple avec une icône personnalisée. ",
      "demo.withoutTitle": "Exemple sans titre :",
      "demo.withoutPicto": "Exemple sans pictogramme :",
      "demo.withoutText": "Exemple sans texte :",
      "demo.dynamic": "Contenu sous format HTML :"
    },
    "fab-menu": {
      "event": {
        "save": "Enregistrer",
        "save-copy": "Enregister une copie",
        "add": "Ajouter",
        "delete": "Supprimer"
      }
    },
    "horizontal-gauge": {
      "with-custom-style": "Avec style personnalisé, ici padding 16px à gauche et à droite :"
    },
    "split-button": {
      "event": {
        "save": "Enregistrer",
        "save-as": "Enregistrer une copie",
        "save-copy": "Enregistrer sous...",
        "save-as-pdf": "Enregistrer en pdf",
        "navigate": "Navigation",
        "operations": "Opérations"
      }
    },
    "button-flottant": {
      "ajout": "Ajouter",
      "rollback": "Annuler",
      "delete": "Supprimer"
    },
    "list": {
      "multicombo": "Liste à choix multiple",
      "search": "Liste avec loupe",
      "listbox": "Liste déroulante",
      "autocomplete": "Liste avec autocomplete",
      "ServiceAutocomplete": "Liste autocomplete avec appel de service",
      "aucun": "Aucun",
      "all": "Tous",
      "multicomboGroupSearch": "Liste avec loupe et groupment à choix multiple "
    },
    "datepicker": {
      "label": "Date",
      "exempleLunarDate": "En utilisant la Date Lunaire, on obtient un format allant de 0 à 99 sur 6 chiffres."
    },
    "datepickerrange": {
      "label": "Start Date - End date",
      "limitRange_doc": "Dans l'exemple suivant la plage de date est limitée du 1er Janvier de l'année courante jusqu'au 31 Décembre de l'année suivante"
    },
    "year-picker": {
      "label": "Année",
      "placeholder": "Saisir une année",
      "full": "année par défaut {{defaultYear}}, min {{ min }} | max {{ max }}",
      "nolimit": "année par défaut {{defaultYear}}",
      "min": "année min {{ min }}",
      "max": "année max {{ max }}"
    },
    "datatable": {
      "titleTableWithClass": "Exemple de titre : Définissez la classe du titre grâce à l'attribut titleClass",
      "title": "Démo des actions possibles sur le composant bl-table. Tout le layout est encapsulé dans le composant. Il prend en entrée un JSON avec tous les paramètres selon le modèle <b>BlTableConfig</b>.<br> Configurer les options générales, les actions (boutons, menu vertical de masse ou en colonne). Cliquez ensuite sur 'Voir la config' et copier coller le fichier de configuration dans votre projet afin de l'adapter à votre convenance.  <br>Si la table n'est pas paginée (hidePaginator à true), le bouton d'ajout est flottant, voir filtre \"Options générales\" pour désactiver la pagination dans cet exemple.",
      "viewconfig": "Voir la config",
      "filter.by": "Filtrer par",
      "title_config": "Fichier de configuration JSON",
      "copy_config": "Copier le fichier de configuration",
      "config.copied": "Configuration copiée",
      "verticalLayout": "Tableau avec filtre à droite",
      "horizontalLayout": "Tableau avec filtre en haut de la table",
      "compareObject": "fonction qui compare deux elements de la liste et il retourn si il sont identique",
      "showSearchField": "Boolean qui permet d'afficher ou cacher le champ rechercher",
      "changeComparing": "Changer la fonction de comparaison",
      "showSearchFilter": "Afficher ou cacher la recherche",
      "setOrRemoveDefaultFilter": "Filter par default",
      "changeComparingDesription": "Le button permet de basculer entre l'utilisation de comparateur d'objet par défaut et un comparateur specifique (le button modifier l'attribue compareObject de la composante) ",
      "showSearchFilterDesription": "Permet de modifier la valeur de l'attribut showSearchFilter pour afficher ou cacher le champ de recherche",
      "setOrRemoveDefaultFilterDesription": "permet d'initialiser l'attribut initialFilter par une valeur initial ou la retirer",
      "compareObjectWarning": "La fonction de comparaison est obligatoire si vous ne loader pas la liste en entier au début si non la séléction peut ne pas fonctionner comme prévu",
      "table_RightSideFilter": "Tableau avec Filter à droite",
      "table_TopFilter": "Tableau avec Filter en haut",
      "markedFor": "Table avec Actions marquées pour",
      "action": {
        "title_optionColumn": "Colonne action",
        "title_optionGroupButton": "Bouton d'action",
        "title_optionListAction": "Vertical Menu",
        "deactivate": "Désactiver",
        "activate": "Activer",
        "excel": "Export Excel",
        "delete": "Supprimer",
        "control": "Contrôler",
        "control_all": "Contrôler tous",
        "notify": "Notifier",
        "add": "Ajouter",
        "copy": "Copier",
        "title_optionFilters": "Nombre de filtres par ligne",
        "title_optionDisplaySearchButton": "Afficher le bouton rechercher",
        "title_optionSimulateLongResponse": "Simuler recherche asynchrone",
        "title_optionEmpty": "Afficher une liste vide",
        "delete.confirm": "Etes-vous sûr de vouloir supprimer l'élément ?",
        "delete.confirm.unique": "Etes-vous sûrs de vouloir supprimer l'utilisateur {{nom}} {{prenom}} ?",
        "delete.confirm.multi": "Etes-vous sûrs de vouloir supprimer les {{length}} utilisateur(s) sélectionné(s) ?",
        "confirm.btn.yes": "Oui",
        "confirm.btn.no": "Annuler",
        "confirm.title": "Confirmation",
        "confirm.btn.delete": "Supprimer",
        "confirm.btn.close": "Fermer",
        "call.event": "Action déclenchée"
      },
      "right": {
        "title_option": "Options générales",
        "add": "Ajouter un élément",
        "groupActionList": "Burger menu d'actions vertical",
        "groupActionButton": "Boutons d'action",
        "colonAction": "Colonne d'actions de ligne",
        "selectAll": "Sélectionner tout",
        "selectOne": "Sélection d'un élément",
        "search": "Recherche rapide",
        "filter": "Filtres activés",
        "paginator": "Affiche pagination",
        "refresh": "Actualisation",
        "chosenRow": "Effet de sélection de ligne"
      },
      "event": {
        "validate": "Validation en cours ...",
        "rollback": "Annulation en cours ...",
        "control": "Contrôle en cours ...",
        "delete": "Suppression en cours ...",
        "delete.ok": "Suppression effectuée",
        "notify": "Notification en cours ...",
        "deactivate": "Désactivation du compte en cours ...",
        "activate": "Activation du compte en cours ...",
        "excel": "Export en cours ...",
        "add": "Ajout d'un élément",
        "close": "Fermeture en cours ...",
        "row-click": "Clic sur la ligne",
        "row-click-status-edition": "Clic sur la ligne: passage en mode édition",
        "row-click-status-none": "Clic sur la ligne: passage en mode initial",
        "chip-click": "Clic sur la chip"
      },
      "header": {
        "matricule": "Matricule",
        "lastname": "Nom",
        "selected": "sélectionné",
        "firstname": "Prénom",
        "department": "Service",
        "mail": "Email",
        "status": "Compte valide",
        "date": "Dernière connection",
        "vr": "VR",
        "city": "Ville",
        "code": "Code",
        "label": "Label"
      },
      "vr": {
        "popup.title": "Données VR",
        "popup.description": "Voici un exemple de colonnes spécifiques avec des possibilités d'ouverture de popup. Il faut paramétrer dans le fichier de config la zone <b>data.column.actionColumn</b> (Cf modèle <b>BlAction</b> pour voir comment on ajoute l'icone, l'évent, ...) ",
        "popup.data": "Les données de la ligne sont récupérées via le subscibe de l'event emitter de <b>config.data.column.actionColumn.eventEmitter</b>.<br><br>Voici les données de la ligne récupérées au format JSON pour personnaliser côté produit l'affichage :"
      },
      "breadcrumb": {
        "label": "Fil d'ariane",
        "placeholder": "Fil d'ariane"
      },
      "notification": {}
    },
    "filter": {
      "filter1": "1er filtre",
      "filter2": "2ème filtre",
      "filter3": "3ème filtre",
      "filter4": "4ème filtre",
      "filter5": "5ème filtre",
      "element.per.line": "Nombre d'éléments par ligne",
      "display.search": "Afficher le bouton rechercher",
      "display.reset": "Afficher le bouton réinitialiser",
      "linebreak": "Retour à la ligne automatique",
      "configuration": "Sélectionner une configuration pour le filtre"
    },
    "dialog": {
      "custom": {
        "description": "Dialog custom (tous les inputs sont paramétrables) (peu recommandée)",
        "button": "Ouvrir dialog custom",
        "title": "Ceci est un titre custom de dialog : {{data}}",
        "text": "Ceci est un texte custom de dialog ({{data}})",
        "yesButtonTxt": "Ceci est un 'Oui' custom de dialog",
        "noButtonTxt": "Ceci est un 'Non' custom de dialog",
        "cancelButtonTxt": "Ceci est un 'Annuler' custom de dialog",
        "closeButtonTxt": "Ceci est un 'Fermer' custom de dialog",
        "pathEnum": "Afin de connaitre le path des images SVG  vous pouvez utilisez l'enum  BlDialogSvgRoutes  ",
        "errorLink": "- ERROR : Lien SVG Erreur",
        "warningLink": "- WARNING :Lien SVG Alerte",
        "questionLink": "- QUESTION :Lien SVG question",
        "successLink": "- SUCCESS :Lien SVG réussite",
        "technicalLink": "- TECHNICAL : Lien SVG technique"
      },
      "save": {
        "description": "Dialog générique de sauvegarde (seul l'input 'titre' est paramétrable)",
        "button": "Ouvrir dialog de sauvegarde",
        "title": "Libellé obligatoire de sauvegarde : {{data}}"
      },
      "delete": {
        "description": "Dialog générique de suppression (seul l'input 'titre' est paramétrable)",
        "button": "Ouvrir dialog de suppression",
        "title": "Libellé obligatoire de suppression Libellé obligatoire de suppression Libellé obligatoire de suppression: {{data}}"
      },
      "success": {
        "description": "Dialog générique de succès (seul les inputs 'titre' et 'text' sont paramétrables)",
        "button": "Ouvrir dialog de succès",
        "title": "Libellé obligatoire de succès : {{data}}",
        "text": "Libellé facultatif de succès Libellé facultatif de succès Libellé facultatif de succès({{data}})"
      },
      "error": {
        "description": "Dialog générique d'erreur (seul les inputs 'titre' et 'text' sont paramétrables)",
        "button": "Ouvrir dialog d'erreur",
        "title": "Libellé obligatoire d'erreur : {{data}}",
        "text": "Libellé facultatif d'erreur ({{data}})<br/> <span class='red'>test</span>"
      },
      "technicalError": {
        "description": "Dialog générique d'erreur technique (seul les inputs 'titre' et 'text' sont paramétrables)",
        "button": "Ouvrir dialog d'erreur technique",
        "title": "Libellé obligatoire d'erreur technique : {{data}}",
        "text": "Libellé facultatif d'erreur technique ({{data}})"
      },
      "blocker": "Version bloquante",
      "wait": {
        "title": "Numérotation en cours...",
        "text": "L'étape suivante s'ouvrira automatiquement à la fin du traitement."
      },
      "info": {
        "description": "Dialog générique d'information (tout les entrées sont paramétrables)",
        "button": "Ouvrir dialog d'information"
      }
    },
    "generic-dialog": {
      "data": "Exemple de données en paramètre",
      "title": "Lancer un traitement long",
      "title2": "Formulaire de saisie",
      "buttonTitle": "Ouvrir Exemple 1 - Wait",
      "buttonTitle2": "Ouvrir Exemple 2 - Valeur de retour",
      "yesButtonTxt": "Oui",
      "noButtonTxt": "Non",
      "cancelButtonTxt": "Annuler",
      "closeButtonTxt": "Fermer",
      "waitTitle": "Numérotation en cours",
      "waitMessage": "L'étape suivante s'ouvrira automatiquement à la fin du traitement.",
      "label": "Durée du traitement",
      "label2": "Valeur",
      "placeholder": "Temps (ms)",
      "message": "Saisir la durée du traitement pour afficher la modale d'attente.",
      "message2": "Saisir une valeur qui sera retournée par la dialog."
    },
    "snackbar": {
      "success": {
        "button": "Ouvrir snackbar de succès"
      },
      "warning": {
        "button": "Ouvrir snackbar de warning"
      },
      "error": {
        "button": "Ouvrir snackbar d'erreur"
      }
    },
    "multi-card-template": {
      "description": "<p>Ce template est un modèle de page que vous pouvez intégrer en utilisant la balise : <code>bl-multi-card-template</code></p><p>Ce modèle peut-être utilisé dans le cas d'un formulaire à plusieurs cartes. Il se compose des éléments suivants:</p><ul><li>- Un titre de page et un bouton de fermeture</li><li>- Une ou plusieurs cartes contenant le crop html décrit par le développeur.</li><li>- Un pied de page contenant des boutons définits par le développeur.</li></ul>",
      "simple-form": {
        "title": "bl-multi-card-template-sample : Formulaire simple"
      },
      "complex-form": {
        "title": "bl-multi-card-template-sample : Formulaire complexe"
      }
    },
    "tab-group-form": {
      "title": "Formulaire avec Onglets",
      "description": "<p>Ce formulaire est un exemple d'utilisation du template de page : <code>bl-page-template</code></p><p>représentant une page avec onglets.</p>",
      "fist-tab": "Premier onglet",
      "second-tab": "Deuxième onglet",
      "form-title": "Titre du groupe"
    },
    "stepper": {
      "label_step1": "Label of the first step",
      "label_step2": "Label of the second step",
      "label_step3": "Label of the third step"
    },
    "stepper-form-template": {
      "example-title": "Formulaire en étapes",
      "title": "bl-stepper : Formulaire en étapes",
      "description": "<p>Ce formulaire est un exemple d'utilisation du composant <code>bl-stepper</code> dans un template de page.</p><p>Le contenu de l'étape 1 est implémenté avec le template <code>bl-multi-card-template</code>. ",
      "step1": "Step one",
      "step2": "Step two",
      "step3": "Step three"
    },
    "sticky-header": {
      "title": "Le titre collant",
      "description": "numéro de ligne est: "
    },
    "no-data": {
      "exemple1": "Affichage du composant seul",
      "title1": "Aucun Dossier",
      "subtitle1": "Pour ajouter un dossier, appuyer sur le '+'",
      "exemple2": "Cas d'utilisation dans une carte :",
      "title-card": "Derniers dossiers consultés",
      "title2": "Aucun dossier"
    },
    "counter": {
      "showColors": "Afficher les couleurs disponibles"
    }
  },
  "common": {
    "status": "Statut",
    "yes": "Oui",
    "no": "Non",
    "activated": "Activé",
    "deactivated": "Désactivé",
    "optional": "optionnel"
  },
  "custumValidation": {
    "required": "Custum messages d'erreur required "
  },
  "param.customPaginator.itemsPerPageLabel": "Lignes par page",
  "param.customPaginator.firstPageLabel": "Première page",
  "param.customPaginator.lastPageLabel": "Dernière page",
  "param.customPaginator.nextPageLabel": "Page suivante",
  "param.customPaginator.previousPageLabel": "Page précédente"
}
